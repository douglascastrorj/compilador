{"changed":true,"filter":false,"title":"antesDoPrint","tooltip":"/antesDoPrint","value":"//Mexer no BOOLEAN\n\n%{\n#include <iostream>\n#include <string>\n#include <sstream>\n#include <fstream>\n#include <map>\n#include \"escopo.h\"\n\n#define YYSTYPE atributos\n\nusing namespace std;\n\n\n//Variaveis Globais\nbool appendLogFile = true; //falso apaga a porra toda do arquivo, DEIXE TRUE\nint curVar = 0;\nint curLabel = 0;\nint i = 0;\nstruct atributos\n{\n\tstring label;\n\tstring traducao;\n\tint tipo;\n};\n\ntypedef struct atributos atributos;\n\n// typedef\n\nstd::map<string, variavel> varTable;\nmap_stack* pilha = createMapStack();\n\nVarTable escopoGlobal;\n// pushEscopo(pilha, escopoGlobal);\n\nDeclaracoes declaracoes;\n\n\n\n// Functions\nvariavel getVarOnStack(string label);\nstring getVarType(int);\nint checkType(int, int);\natributos castFunction(int, string, int, string, int, string);\nvoid createLog (string name, string toWrite, bool);\nint getTokenType(string);\nint checkTypeArith(int, int);\natributos castArith(atributos, atributos, string);\natributos castFunctionArith(int, string, int, string, int, string);\nstring declararVariaveis();\nstring getLabel(int);\n\nvoid createVarTableLog(VarTable);\n\nint yylex(void);\nvoid yyerror(string);\n\n\nstring getVarName(){\n\treturn \"temp\" + to_string(++curVar);\n}\n\n\n\n%}\n\n%token TK_NUM TK_REAL TK_CHAR TK_BOOL\n%token TK_MAIN TK_ID TK_TIPO_INT TK_TIPO_FLOAT TK_TIPO_CHAR TK_TIPO_BOOL\n%token TK_FIM TK_ERROR\n%token TK_EQUAL TK_GTE TK_LTE TK_NEQUAL TK_MAIOR TK_MENOR\n%token TK_AND TK_OR TK_NOT\n%token TK_IF TK_WHILE\n%token TK_OPEN TK_CLOSE\n\n%start S\n%left ')'\n%left '+' '-'\n%left '*' '/'\n%left '('\n%right '^' '<' '>' TK_GTE TK_LTE TK_NEQUAL TK_EQUAL TK_NOT '='\n\n%%\n\nS\t\t\t: TK_TIPO_INT TK_MAIN '(' ')' BLOCO\n\t\t\t{\n\t\t\t\tcout <<\"\\n\\n/*Compilador Bolado*/\\n\" << \"#include <iostream>\\n#include <string.h>\\n#include <stdio.h>\\n\\n\"  << declararVariaveis() << \"\\nint main(void)\\n{\\n\" << $5.traducao << \"\\treturn 0;\\n}\" << endl;\n\t\t\t\t\n\t\t\t\tofstream outputFile;\n\t\t\t\toutputFile.open(\"src.c\");\n\t\t\t\toutputFile <<\"\\n\\n/*Compilador Bolado*/\\n\" << \"#include <iostream>\\n#include <string.h>\\n#include <stdio.h>\\n\\n\"  << declararVariaveis() << \"\\nint main(void)\\n{\\n\" << $5.traducao << \"\\treturn 0;\\n}\" << endl;\n\t\t\t\toutputFile.close();\n\t\t\t}\n\t\t\t\n\t\t\t;\n\nBLOCO\t\t: PUSH_SCOPE '{' COMANDOS '}' POP_SCOPE\n\t\t\t{\n\t\t\t\t\n\t\t\t\t$$.traducao = $3.traducao;\n\t\t\t\t\n\t\t\t}\n\t\t\t;\n\nPUSH_SCOPE: {\n\t\t\t\tVarTable escopo;\n\t\t\t\tpushEscopo(pilha,escopo);\n\t\t\t\t\n\t\t\t\t$$.traducao = \"\";\n\t\t\t\t$$.label = \"\";\n\t\t\t}\n\t\t\t\nPOP_SCOPE:\t{\n\t\t\t\tcout << \"escopoAtual \" << pilha->escopoAtual << endl;\n\t\t\t\tcreateVarTableLog(pilha->escopos[pilha->escopoAtual]);\n\t\t\t\tpop(pilha);\n\t\t\t\t\n\t\t\t\t$$.traducao = \"\";\n\t\t\t\t$$.label = \"\";\n\t\t\t};\n\nCOMANDOS\t: COMANDO COMANDOS\n\t\t\t{\n\n\t\t\t\t$$.traducao = $1.traducao + $2.traducao;\n\t\t\t}\n\t\t\t|\n\t\t\t;\n\nCOMANDO \t: E ';'\n\t\t\t| TK_IF '(' E ')' BLOCO\n\t\t\t{\n\t\t\t\t// VarTable varTableEscopo;\n\t\t\t\t// pushEscopo(escopos, varTableEscopo);\n\n\t\t\t    int teste = checkType($3.tipo, $3.tipo);\n\n\t\t\t    if (teste != TK_TIPO_BOOL && teste != TK_TIPO_INT){\n\t\t\t        puts(\"Invalid Type for the IF Statment\");\n\t\t\t        exit(0);\n\t\t\t    }\n\t\t\t\tstring varName = getVarName();\n\t\t\t\tstring gotoLabel = getLabel(TK_IF);\n\t\t\t\tstring linha = \"\\t\" + varName + \" = !\" + $3.label + \";\\n\";\n\t\t\t\tstring showLabel = \"\\t\"+gotoLabel + \":\\n\\n\";\n\n\t\t\t\tvariavel v = createVar(varName, getVarType(teste), varName);\n\t\t\t\taddVar2Escopo(pilha, v);//[varName] = v;\n\t\t\t\tdeclaracoes.push_back(v);\n\t\t\t\t\n\t\t\t\t//cod patrick\n\t\t\t\t// $$.transl = $3.transl + \n\t\t\t\t// \t\t\"\\t\" + var + \" = !\" + $3.label + \";\\n\" +Linha (string)\n\t\t\t\t// \t\t\"\\tif (\" + var + \") goto \" + end + \";\\n\" +\n\t\t\t\t// \t\t$5.transl +\n\t\t\t\t// \t\t\"\\t\" + end + \":\";\n\n\t\t\t\tstring stmt = \"\\tif(\" + varName + \") \" + \"goto \" + gotoLabel +\";\\n\" + $5.traducao + \"\\n\" + showLabel;\n\t\t\t    $$.traducao = $3.traducao + linha + stmt;\n\n\t\t\t\n\n\t\t\t}\n\t\t\t| TK_WHILE '(' E ')' BLOCO\n\t\t\t{\n\t\t\t\tint teste = checkType($3.tipo, $3.tipo);\n\n\t\t\t\tif (teste != TK_TIPO_BOOL && teste != TK_TIPO_INT){\n\t\t\t\t\tputs(\"Invalid Type for the WHILE Statment\");\n\t\t\t\t\texit(0);\n\t\t\t\t}\n\t\t\t\tstring varName = getVarName();\n\t\t\t\tstring beginLabel = \"inicio\" + getLabel(TK_WHILE);\n\t\t\t\tcurLabel--; //Gambiarra para ficar inicio_while_1 e fim_while_1\n\n\t\t\t\tstring endLabel = \"fim\" + getLabel(TK_WHILE);\n\n\t\t\t\tstring linha = \"\\t\" + varName + \" = !\" + $3.label + \";\\n\";\n\t\t\t\tstring showLabel = \"\\tgoto \"+ beginLabel + \";\\n\\n\";\n\n\t\t\t\tvariavel v = createVar(varName, getVarType(teste), varName);\n\t\t\t\taddVar2Escopo(pilha, v);\n\t\t\t\tdeclaracoes.push_back(v);\n\n\t\t\t\tstring stmt =  \"\\t\" + beginLabel +\":\"+ \"\\tif(\" + varName + \") \" + \"goto \" + endLabel +\";\\n\" + $5.traducao + \"\\n\" + showLabel + \"\\t\" + endLabel + \":\\n\\n\";\n\t\t\t    $$.traducao = $3.traducao + linha + stmt;\n\n\n\t\t\t}\n\n\t\t\t| DECLARATION ';'\n\t\t\t{\n\t\t\t\t$$ = $1;\n\t\t\t\ti++;\n\t\t\t}\n\t\t\t| ATRIB ';'\n\t\t\t{\n\t\t\t\t$$ = $1;\n\t\t\t\ti++;\n\t\t\t}\n\t\t\t;\n\nDECLARATION : TYPE VARLIST\n\t\t\t{\n\t\t\t\t$2.tipo = $1.tipo;\n\t\t\t\t$$.traducao = $1.traducao + $2.traducao;\n\t\t\t\t// $$.tipo = ;\n\t\t\t}\n\t\t\t;\n\nTYPE\t\t: TK_TIPO_INT\n\t\t\t{\n\t\t\t\t$$.tipo = TK_TIPO_INT;\n\t\t\t\t$$.traducao = $1.traducao;\n\t\t\t}\n\t\t\t| TK_TIPO_FLOAT\n\t\t\t{\n\t\t\t\t$$.tipo = TK_TIPO_FLOAT;\n\t\t\t\t$$.traducao = $1.traducao;\n\t\t\t}\n\t\t\t| TK_TIPO_CHAR\n\t\t\t{\n\t\t\t\t$$.tipo = TK_TIPO_CHAR;\n\t\t\t\t$$.traducao = $1.traducao;\n\t\t\t}\n\t\t\t| TK_TIPO_BOOL\n\t\t\t{\n\t\t\t\t$$.tipo = TK_TIPO_BOOL;\n\t\t\t\t$$.traducao = $1.traducao;\n\t\t\t}\n\t\t\t;\n\nVARLIST\t\t: VARLIST ',' TK_ID\n\t\t\t{\n\t\t\t\tstring varName = getVarName();\n\t\t\t\t$$.traducao = $1.traducao + $3.traducao;// +\"\\t\" + getVarType($0.tipo) + \" \"+ varName + \"; \\n\";\n\t\t\t\tcreateLog(\"Name\", getVarType($0.tipo) + \" \" + $3.label + \" - \" + varName, appendLogFile);\n\t\t\t\tvariavel v = createVar($3.label, getVarType($0.tipo), varName);\n\t\t\t\taddVar2Escopo(pilha, v);\n\t\t\t\tdeclaracoes.push_back(v);\n\t\t\t}\n\t\t\t| VARLIST ',' ATRIB\n\t\t\t{\n\t\t\t\t$$.traducao = $1.traducao + $3.traducao;\n\t\t\t\t$1.tipo = $0.tipo;\n\t\t\t\t$3.tipo = $0.tipo;\n\t\t\t\t// cout << \"Em \" <<$1.label <<\" Tipo do VARLIST em Var, Atrib: \" << getVarType($0.tipo) << \"\\nEm \"<< $3.label<< \" Tipo da Atrib em Var, Atrib: \" << getVarType($3.tipo) << endl;\n\t\t\t}\n\t\t\t| ATRIB\n\t\t\t{\n\t\t\t\t$$.traducao = $1.traducao;\n\t\t\t\t$$.tipo = $1.tipo;\n\t\t\t\ti++;\n\t\t\t\tputs(\"nso deveria estar aqui\");\n\t\t\t}\n\t\t\t|TK_ID\n\t\t\t{\n\t\t\t\t// COLOCAR no HASH\n\t\t\t\tstring varName = getVarName();\n\t\t\t\t$$.label = $1.label;\n\t\t\t\t$$.traducao = $1.traducao;// + \"\\t\" + getVarType($0.tipo)+ \" \"+ varName + \"; \\n\";\n\t\t\t\tcreateLog(\"Name\", getVarType($0.tipo) + \" \"+ $$.label + \" - \" + varName, appendLogFile);\n\t\t\t\tvariavel v = createVar($$.label, getVarType($0.tipo), varName);\n\t\t\t\t// std::cout << \"Tipo \" << getVarType($0.tipo) << \" com i = \"<< i<< std::endl;\n\t\t\t\taddVar2Escopo(pilha, v);;\n\t\t\t\tdeclaracoes.push_back(v);\n\t\t\t}\n\t\t\t;\n\nATRIB \t\t: TK_ID '=' E\n\t\t\t{\n\t\t\t\tvariavel var = getVarOnStack($1.label);\n\t\t\t\tstring varName = var.nome_temp;\n\n\t\t\t\tstring infere_tipo = \"\", store = \"\";\n\t\t\t\t//variavel v;\n\n\t\t\t\tstd::cout << \"TK_ID = E\" << endl;\n\n\t\t\t\t//variavel n existe na tabela\n\t\t\t\tif(varName == \"\"){\n\t\t\t\t\tvarName = getVarName();\n\t\t\t\t\t// cout << \"ENTREI NO IF \" <<getVarType($0.tipo) << endl;\n\n\t\t\t\t\tif(getVarType($0.tipo) != \"\"){\n\t\t\t\t\t\tcout << \"$0 tipo nao vazio\" << endl;\n\t\t\t\t\t\tinfere_tipo = getVarType($0.tipo);\n\t\t\t\t\t\t\n\t\t\t\t\t}\n\t\t\t\t\telse{\n\t\t\t\t\t\tcout << \"$0 tipo vazio\" << endl;\n\t\t\t\t\t\tinfere_tipo = getVarType($3.tipo);\n\t\t\t\t\t\t\n\t\t\t\t\t}\n\n\t\t\t\t\tvar = createVar($$.label, infere_tipo, varName);\n\n\t\t\t\t\t// std::cout << \"Tipo \" << getVarType($0.tipo) << \" com i = \"<< i<< std::endl;\n\t\t\t\t\t// std::cout << \"(VAR3) Tipo \" << getVarType($3.tipo) << \" com i = \"<< i<< std::endl;\n\n\t\t\t\t\taddVar2Escopo(pilha, var);\n\t\t\t\t\tdeclaracoes.push_back(var);\n\n\t\t\t\t\t\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// Cast na atribuição com Temp \"Store\"\n\t\t\t\tif( (getVarOnStack($1.label).tipo != getVarType($3.tipo) ) ){\n\t\t\t\t\t// std::cout << \"Convert Tipo da \" << $1.label << \"    Tipo: \" << varTable[$1.label].tipo  << std::endl;\n\t\t\t\t\tstore = getVarName();\n\t\t\t\t\tstring linha =  store + \" = (\" +getVarOnStack($1.label).tipo+\") \" + $3.label + \";\\n\";\n\t\t\t\t\tstring linha2 = \"\\t\"  + varName + \" = \" + store + \";\\n\";\n\t\t\t\t\t$$.traducao = $1.traducao + $3.traducao + \"\\t\"  + linha + linha2;\n\n\t\t\t\t\tvariavel v = createVar(store, getVarOnStack($1.label).tipo,store);\n\n\t\t\t\t\taddVar2Escopo(pilha, v);\n\t\t\t\t\tdeclaracoes.push_back(v);\n\t\t\t\t}\n\t\t\t\t// Tipo Inferido ou cast não necessário\n\t\t\t\telse\n\t\t\t\t\t$$.traducao = $1.traducao + $3.traducao+ \"\\t\" + varName  + \" = \" + $3.label +\";\\n\";\n\n\t\t\t\ti++;\n\t\t\t\tcreateLog(\"Name\", getVarType($3.tipo) + \" \"+ $$.label + \" - \" + varName, appendLogFile);\n\t\t\t}\n\t\t\t;\n\nE \t\t\t: '('E')'{\n\n\t\t\t\t$$ = $2;\n\t\t\t}\n\t\t\t| '-' E{\n\t\t\t\t$$.tipo = $2.tipo;\n\t\t\t\tstring varName = getVarName();\n\t\t\t\t$$.label = '-' + $2.label;\n\t\t\t\t$$.traducao = $2.traducao + \"\\t\" + varName +\" = \" + \"-\" + $2.label +\";\\n\";\n\t\t\t\tvariavel v = createVar(varName, getVarType($$.tipo), varName);\n\t\t\t\taddVar2Escopo(pilha, v);\n\t\t\t\tdeclaracoes.push_back(v);\n\n\t\t\t}\n \t\t\t| E '+' E\n\t\t\t{\n\t\t\t\t$$ = castArith($1, $3, \"+\");\n\t\t\t}\n\t\t\t| E '-' E\n\t\t\t{\n\t\t\t\t$$ = castArith($1, $3, \"-\");\n\t\t\t}\n\t\t\t| E '*' E\n\t\t\t{\n\t\t\t\t$$ = castArith($1, $3, \"*\");\n\t\t\t}\n\t\t\t| E '/' E\n\t\t\t{\n\t\t\t\t$$ = castArith($1, $3, \"/\");\n\t\t\t}\n\t\t\t// | E '^' E\n\t\t\t// {\n\t\t\t// \t$$.tipo = checkType($1.tipo, $3.tipo);\n\t\t\t// \tstring varName = getVarName();\n\t\t\t// \t$$.traducao = $1.traducao + $3.traducao + \"\\t\" +getVarType($$.tipo)+ \" \" + varName +\" = \" + \"pow (\"+ $1.label +\" , \"+ $3.label + \")\"+\";\\n\";\n\t\t\t// \t$$.label = varName;\n\t\t\t//\n\t\t\t// }\n\t\t\t| E '>' E\n\t\t\t{\n\t\t\t\t$$.tipo = TK_TIPO_BOOL;\n\t\t\t\tatributos atr = castFunction($1.tipo, $1.label, $3.tipo, $3.label, $$.tipo, \">\");\n\t\t\t\t$$.traducao = $1.traducao + $3.traducao + atr.traducao;\n\t\t\t\t$$.label = atr.label;\n\n\t\t\t}\n\t\t\t| E '<' E\n\t\t\t{\n\t\t\t\t$$.tipo = TK_TIPO_BOOL;\n\t\t\t\tatributos atr = castFunction($1.tipo, $1.label, $3.tipo, $3.label, $$.tipo, \"<\");\n\t\t\t\t$$.traducao = $1.traducao + $3.traducao + atr.traducao;\n\t\t\t\t$$.label = atr.label;\n\t\t\t}\n\t\t\t| E TK_GTE E\n\t\t\t{\n\t\t\t\t$$.tipo = TK_TIPO_BOOL;\n\t\t\t\tatributos atr = castFunction($1.tipo, $1.label, $3.tipo, $3.label, $$.tipo, \">=\");\n\t\t\t\t$$.traducao = $1.traducao + $3.traducao + atr.traducao;\n\t\t\t\t$$.label = atr.label;\n\t\t\t}\n\t\t\t| E TK_LTE E\n\t\t\t{\n\t\t\t\t$$.tipo = TK_TIPO_BOOL;\n\t\t\t\tatributos atr = castFunction($1.tipo, $1.label, $3.tipo, $3.label, $$.tipo, \"<=\");\n\t\t\t\t$$.traducao = $1.traducao + $3.traducao + atr.traducao;\n\t\t\t\t$$.label = atr.label;\n\t\t\t}\n\t\t\t| E TK_EQUAL E\n\t\t\t{\n\t\t\t\t$$.tipo = TK_TIPO_BOOL;\n\t\t\t\tatributos atr = castFunction($1.tipo, $1.label, $3.tipo, $3.label, $$.tipo, \"==\");\n\t\t\t\t$$.traducao = $1.traducao + $3.traducao + atr.traducao;\n\t\t\t\t$$.label = atr.label;\n\t\t\t}\n\t\t\t| E TK_NEQUAL E\n\t\t\t{\n\t\t\t\t$$.tipo = TK_TIPO_BOOL;\n\t\t\t\tatributos atr = castFunction($1.tipo, $1.label, $3.tipo, $3.label, $$.tipo, \"!=\");\n\t\t\t\t$$.traducao = $1.traducao + $3.traducao + atr.traducao;\n\t\t\t\t$$.label = atr.label;\n\t\t\t}\n\t\t\t| E TK_AND E\n\t\t\t{\n\t\t\t\t$$.tipo = TK_TIPO_BOOL;\n\t\t\t\t$$.tipo = checkType($1.tipo, $3.tipo);\n\t\t\t\tstring varName = getVarName();\n\t\t\t\t$$.traducao = $1.traducao + $3.traducao + \"\\t\"+getVarType($$.tipo)+ \" \" +  varName +\" = \"+ $1.label +\" && \"+ $3.label +\";\\n\";\n\t\t\t\t$$.label = varName;\n\t\t\t}\n\t\t\t| E TK_OR E\n\t\t\t{\n\t\t\t\t$$.tipo = TK_TIPO_BOOL;\n\t\t\t\t$$.tipo = checkType($1.tipo, $3.tipo);\n\t\t\t\tstring varName = getVarName();\n\t\t\t\t$$.traducao = $1.traducao + $3.traducao + \"\\t\"+getVarType($$.tipo)+ \" \" +  varName +\" = \"+ $1.label +\" || \"+ $3.label +\";\\n\";\n\t\t\t\t$$.label = varName;\n\t\t\t}\n\t\t\t| TK_NOT E\n\t\t\t{\n\t\t\t\t$$.tipo = checkType($2.tipo, $2.tipo);\n\t\t\t\tstring varName = getVarName();\n\t\t\t\t$$.traducao = $2.traducao + \"\\t\"+getVarType($$.tipo)+ \" \" +  varName +\" = \" \"! \"+ $2.label +\";\\n\";\n\t\t\t\t$$.label = varName;\n\t\t\t}\n\t\t\t| TK_REAL\n\t\t\t{\n\t\t\t\t$$.tipo = TK_TIPO_FLOAT;\n\t\t\t\tstring varName = getVarName();\n\t\t\t\t$$.traducao = \"\\t\" +varName + \" = \" + $1.label + \";\\n\";\n\t\t\t\t$$.label = varName;\n\n\t\t\t\tvariavel v = createVar(varName, getVarType($$.tipo), varName);\n\t\t\t\taddVar2Escopo(pilha, v);\n\t\t\t\tdeclaracoes.push_back(v);\n\t\t\t}\n\t\t\t| TK_NUM\n\t\t\t{\n\t\t\t\t$$.tipo = TK_TIPO_INT;\n\t\t\t\tstring varName = getVarName();\n\t\t\t\t$$.traducao = \"\\t\" +varName + \" = \" + $1.label + \";\\n\";\n\t\t\t\t$$.label = varName;\n\t\t\t\tvariavel v = createVar(varName, getVarType($$.tipo), varName);\n\t\t\t\taddVar2Escopo(pilha, v);\n\t\t\t\tdeclaracoes.push_back(v);\n\t\t\t}\n\t\t\t| TK_BOOL\n\t\t\t{\n\t\t\t\t$$.tipo = TK_TIPO_BOOL;\n\t\t\t\tstring varName = getVarName();\n\t\t\t\t// puts(\"Estou aqui\");\n\t\t\t\t$$.traducao = \"\\t\" + varName+ \" = \" + $1.label + \";\\n\";\n\t\t\t\t$$.label = varName;\n\t\t\t\tvariavel v = createVar(varName, getVarType($$.tipo), varName);\n\t\t\t\taddVar2Escopo(pilha, v);\n\t\t\t\tdeclaracoes.push_back(v);\n\t\t\t}\n\t\t\t| TK_CHAR\n\t\t\t{\n\t\t\t\t// puts(\"Estou aqui\");\n\t\t\t\t$$.tipo = TK_TIPO_CHAR;\n\t\t\t\tstring varName = getVarName();\n\t\t\t\t$$.traducao = \"\\t\" + varName + \" = \" + $1.label + \";\\n\";\n\t\t\t\t$$.label = varName;\n\t\t\t\tvariavel v = createVar(varName, getVarType($$.tipo), varName);\n\t\t\t\taddVar2Escopo(pilha, v);\n\t\t\t\tdeclaracoes.push_back(v);\n\t\t\t}\n\t\t\t| TK_ID\n\t\t\t{\n\t\t\t\tvariavel v = getVarOnStack($1.label);\n\t\t\t\tstring id = v.nome_temp;\n\n\t\t\t\tif (id == \"\"){\n\t\t\t\t\tcout << \"Erro de Compilação Variavel '\" << $1.label << \"' inexistente\" <<endl;\n\t\t\t\t\texit(0);\n\t\t\t\t}\n\t\t\t\telse{\n\n\t\t\t\t\t$$.traducao = $1.traducao;\n\t\t\t\t\t$$.label = id;\n\t\t\t\t\t$$.tipo = getTokenType(v.tipo);\n\t\t\t\t\tcout << \"REGRA TK_ID: \" <<$$.label << $$.tipo <<\": \"+v.tipo << endl;\n\t\t\t\t}\n\t\t\t}\n\t\t\t;\n\n%%\n\n#include \"lex.yy.c\"\n\nint yyparse();\n\nint main( int argc, char* argv[] )\n{\n\n\t// Criando escopo Globais\n\t// std::cout << pilha->escopoAtual << std::endl;\n\t// pushEscopo(pilha, escopoGlobal);\n\t// std::cout << pilha->escopoAtual << std::endl;\n\n\t//criar datamap em arquivo\n\tyyparse();\n\t// show content:\n\n\n\n\t// createLog(\"varTable\", linhas, false);\n\t//createVarTableLog();\n\n\treturn 0;\n}\n\nstring declararVariaveis(){\n\treturn getDeclaracoes(declaracoes);\n}\n\nvoid yyerror( string MSG )\n{\n\tcout << MSG << endl;\n\texit (0);\n}\n\nint getTokenType(string type){\n\tif(type == \"int\")\n\t\treturn TK_TIPO_INT;\n\tif(type ==  \"float\")\n\t\treturn TK_TIPO_FLOAT;\n\tif(type == \"char\")\n\t\treturn TK_TIPO_CHAR;\n\tif(type == \"bool\")\n\t\treturn TK_TIPO_INT;\n\n}\n\nstring getVarType(int type){\n\tif(type == TK_TIPO_INT)\n\t\treturn \"int\";\n\tif(type == TK_TIPO_FLOAT )\n\t\treturn \"float\";\n\tif(type == TK_TIPO_CHAR)\n\t\treturn \"char\";\n\tif(type == TK_TIPO_BOOL)\n\t\treturn \"int\";\n\t\n\treturn \"\";\t\n\t//return \"undefined\";\n}\n\nint checkType (int t1, int t3){\n\n\t//cout << \"Tipo1 \" << getVarType(t1) << \"Tipo3 \" << getVarType(t3) << endl;\n\tif ( (t1 != TK_TIPO_INT && t1 != TK_TIPO_FLOAT) || (t3 != TK_TIPO_INT && t3 != TK_TIPO_FLOAT) ) {\n\n\t\tif (t1 == TK_TIPO_BOOL && t3 == TK_TIPO_BOOL)\n\t\t\treturn TK_TIPO_BOOL;\n\n\t\telse if (t1 == TK_TIPO_CHAR && t3 == TK_TIPO_CHAR)\n\t\t\treturn TK_TIPO_CHAR;\n\n\t\tputs(\"Invalid Type for the Operation\");\n\t\t//exit(0);\n\t}\n\telse if (t1 == TK_TIPO_FLOAT || t3 == TK_TIPO_FLOAT){\n\n\t\treturn TK_TIPO_FLOAT;\n\n\t}\n\telse{\n\n\t\treturn TK_TIPO_INT;\n\t}\n}\n\natributos castFunction(int t1, string t1_label, int t3, string t3_label, int t0, string sinal){\n\tint teste = checkType(t1, t3);\n\tstring linha = \"\", linha2 = \"\";\n\n\tstring varName = getVarName();\n\tatributos retorno;\n\n\tif (teste == TK_TIPO_FLOAT){\n\n\t\tstring store = getVarName();\n\t\tretorno.label = store;\n\n\t\tvariavel v = createVar(varName, getVarType(teste), varName);\n\t\taddVar2Escopo(pilha, v);\n\t\tdeclaracoes.push_back(v);\n\t\tv = createVar(store, getVarType(teste), store);\n\t\taddVar2Escopo(pilha, v);\n\t\tdeclaracoes.push_back(v);\n\n\t\tif(t1 == TK_TIPO_INT){\n\t\t\tlinha = \"\\t\" + varName + \" = (float) \" + t1_label +\";\\n\";\n\t\t\tlinha2 = \"\\t\" + store +\" = \"+ varName + \" \" + sinal + \" \" +t3_label +\";\\n\";\n\t\t}\n\t\telse if (t3 == TK_TIPO_INT){\n\t\t\tlinha = \"\\tfloat \" + varName + \" = (float) \" + t3_label +\";\\n\";\n\t\t\tlinha2 = \"\\t\" + store +\" = \"+ t1_label + \" \" + sinal + \" \" + varName +\";\\n\";\n\t\t}\n\t}\n\telse if (teste == TK_TIPO_INT){\n\t\tretorno.label = varName;\n\t\tlinha2 = \"\\t\" + varName +\" = \"+ t1_label + \" \" + sinal + \" \" + t3_label +\";\\n\";\n\t\tvariavel v = createVar(varName, getVarType(teste), varName);\n\t\taddVar2Escopo(pilha, v);\n\t\tdeclaracoes.push_back(v);\n\t}\n\n\tretorno.traducao = linha + linha2;\n\tretorno.tipo = t0;\n\treturn retorno;\n\n}\n\natributos castFunctionArith(int t1, string t1_label, int t3, string t3_label, int t0, string sinal){\n\tint teste = checkType(t1, t3);\n\tstring linha = \"\", linha2 = \"\";\n\n\tstring varName = getVarName();\n\tstring store = getVarName();\n\tif (teste == TK_TIPO_FLOAT){\n\n\t\tvariavel v = createVar(varName, getVarType(teste), varName);\n\t\taddVar2Escopo(pilha, v);\n\t\tdeclaracoes.push_back(v);\n\t\tv = createVar(store, getVarType(teste), store);\n\t\taddVar2Escopo(pilha, v);\n\t\tdeclaracoes.push_back(v);\n\n\t\tif(t1 == TK_TIPO_INT){\n\t\t\tlinha = \"\\t\" + varName + \" = (float) \" + t1_label +\";\\n\";\n\t\t\tlinha2 = \"\\t\" + store +\" = \"+ varName + \" \" + sinal + \" \" +t3_label +\";\\n\";\n\t\t}\n\t\telse if (t3 == TK_TIPO_INT){\n\t\t\tlinha = \"\\t\" + varName + \" = (float) \" + t3_label +\";\\n\";\n\t\t\tlinha2 = \"\\t\" + store +\" = \"+ t1_label + \" \" + sinal + \" \" + varName +\";\\n\";\n\t\t}\n\t}\n\tatributos retorno;\n\tretorno.traducao = linha + linha2;\n\tretorno.label = store;\n\tretorno.tipo = t0;\n\treturn retorno;\n\n}\n\nint checkTypeArith(int t1, int t3){\n\tif ( (t1 != TK_TIPO_INT && t1 != TK_TIPO_FLOAT) || (t3 != TK_TIPO_INT && t3 != TK_TIPO_FLOAT) ) {\n\t\tputs(\"Invalid Types for Arithmetics Operators!\");\n\n\t\tcout << \"TIPOS DE T1 E T3 \" << t1 << \" \" << t3 << endl;\n\t\texit(0);\n\n\t}\n\tif(t1 == TK_TIPO_FLOAT || t3 == TK_TIPO_FLOAT)\n\t\treturn TK_TIPO_FLOAT;\n\n\telse\n\t\treturn TK_TIPO_INT;\n}\n\nvoid createLog (string name, string toWrite, bool append){\n\n\tFILE *p_arquivo;\n\t//char *nome = \"arquivo.txt\";\n\tstring parameter = \"w\";\n\n\tif(append)\n\t\tparameter = \"a\";\n\n\tif((p_arquivo = fopen(name.c_str(), parameter.c_str()) ) == NULL)\n\t{\n\t\tprintf(\"\\n\\nNao foi possivel abrir o arquivo.\\n\");\n\t\treturn;\n\t}\n\n\n\tfprintf(p_arquivo,\"%s\\n\", toWrite.c_str());\n\n\tfclose(p_arquivo);\n\n}\n\nvoid createVarTableLog (VarTable escopo){\n\n\tstring linhas;\n\t// for (int i = 0; i < pilha->escopos.size(); i++){\n\t// \tVarTable varTable = pilha->escopos[i];\n\tlinhas += \"Escopo \" + to_string(pilha->escopoAtual) + \"\\n\";\n\n\t// \t// linhas += \"\\n\";\n\tfor (std::map<string,variavel>::iterator it=escopo.begin(); it!=escopo.end(); ++it){\n\t\tvariavel var = it->second;\n\t\tlinhas += var.tipo + \"\\t\" + var.nome_var + \"\\t\" + var.nome_temp + \"\\n\";\n\t}\n\tlinhas += \"\\n\";\n\t// }\n\n\tcreateLog(\"varTable\", linhas, true);\n}\nvariavel getVarOnStack(string label){\n\n\t\n\tcout <<  \" GET TEMP ON TABLE: buscando: \" << label<< \" ESCOPO ATUAL  \" << pilha->escopoAtual << endl;\n\n\tfor (int i = pilha->escopoAtual; i >= 0 ; i--)\n\t{\t\n\t\tVarTable varTable = pilha->escopos[i];\n\t\tcout<< \"buscando no Escopo: \" << i <<endl;\n\t\tfor (std::map<string,variavel>::iterator it=varTable.begin(); it!=varTable.end(); ++it){\n\t\t\tvariavel var = it->second;\n\t\t\tcout << var.tipo + \"\\t\" + var.nome_var + \"\\t\" + var.nome_temp + \"\\n\" << endl;\n\t\t}\n\t}\n\n\n\tVarTable varTable = pilha->escopos[pilha->escopoAtual];\n\tif ( varTable.count(label) ){\n\t\t//variavel ja foi declarada\n\t\tcout<< \"achei \" << label << \" no escopo atual\" << endl;\n\t\treturn varTable[label];\n\t}else{\n\t\tint escopo = pilha->escopoAtual-1;\n\t\tfor(int i = escopo; i > -1; i--){\n\t\t\tVarTable varTable = pilha->escopos[i];\n\t\t\tif ( varTable.count(label) ){\n\t\t\t\t//variavel ja foi declarada\n\t\t\t\tcout<< \"achei \" << label << \" no escopo \" << i << endl;\n\t\t\t\tcout << varTable[label].nome_temp << \" \" << varTable[label].tipo << endl;\n\t\t\t\treturn varTable[label];\n\t\t\t}\n\t\t}\n\t\tcout << \"nao achei \" << label << endl;\n\n\t\treturn createVar(\"\", \"\",\"\");\n\t}\n\n\n\t// cout << \"Nein Nein Nein variavel \"<< label << endl;\n\t// exit(0);\t\n\n}\n\natributos castArith(atributos s1, atributos s3, string sinal){\n\n\tatributos ss;\n\tss.tipo = checkTypeArith(s1.tipo, s3.tipo);\n\t//Sem Cast\n\tif (s1.tipo == s3.tipo){\n\t\tstring varName = getVarName();\n\t\tss.traducao = s1.traducao + s3.traducao + \"\\t\" + varName + \" = \"+ s1.label +\" \" + sinal + \" \"+ s3.label +\";\\n\";\n\t\tss.label = varName;\n\n\t\tvariavel v = createVar(varName, getVarType(ss.tipo), varName);\n\t\t//varTable[varName] = v;\n\t\taddVar2Escopo(pilha, v);\n\t\tdeclaracoes.push_back(v);\n\t}\n\t//Com cast\n\telse{\n\t\tatributos atr = castFunctionArith(s1.tipo, s1.label, s3.tipo, s3.label, ss.tipo, sinal);\n\t\tss.traducao = s1.traducao + s3.traducao + atr.traducao;\n\t\tss.label = atr.label;\n\t}\n\treturn ss;\n\n}\n\nstring getLabel(int token){\n\n\tif (token == TK_IF)\n\t\treturn \"fim_if_\" + to_string(++curLabel);\n\n\telse if (token == TK_WHILE)\n\t\treturn \"_while_\" + to_string(++curLabel);\n}\n","undoManager":{"mark":-2,"position":0,"stack":[[{"start":{"row":0,"column":0},"end":{"row":786,"column":0},"action":"insert","lines":["//Mexer no BOOLEAN","","%{","#include <iostream>","#include <string>","#include <sstream>","#include <fstream>","#include <map>","#include \"escopo.h\"","","#define YYSTYPE atributos","","using namespace std;","","","//Variaveis Globais","bool appendLogFile = true; //falso apaga a porra toda do arquivo, DEIXE TRUE","int curVar = 0;","int curLabel = 0;","int i = 0;","struct atributos","{","\tstring label;","\tstring traducao;","\tint tipo;","};","","typedef struct atributos atributos;","","// typedef","","std::map<string, variavel> varTable;","map_stack* pilha = createMapStack();","","VarTable escopoGlobal;","// pushEscopo(pilha, escopoGlobal);","","Declaracoes declaracoes;","","","","// Functions","variavel getVarOnStack(string label);","string getVarType(int);","int checkType(int, int);","atributos castFunction(int, string, int, string, int, string);","void createLog (string name, string toWrite, bool);","int getTokenType(string);","int checkTypeArith(int, int);","atributos castArith(atributos, atributos, string);","atributos castFunctionArith(int, string, int, string, int, string);","string declararVariaveis();","string getLabel(int);","","void createVarTableLog(VarTable);","","int yylex(void);","void yyerror(string);","","","string getVarName(){","\treturn \"temp\" + to_string(++curVar);","}","","","","%}","","%token TK_NUM TK_REAL TK_CHAR TK_BOOL","%token TK_MAIN TK_ID TK_TIPO_INT TK_TIPO_FLOAT TK_TIPO_CHAR TK_TIPO_BOOL","%token TK_FIM TK_ERROR","%token TK_EQUAL TK_GTE TK_LTE TK_NEQUAL TK_MAIOR TK_MENOR","%token TK_AND TK_OR TK_NOT","%token TK_IF TK_WHILE","%token TK_OPEN TK_CLOSE","","%start S","%left ')'","%left '+' '-'","%left '*' '/'","%left '('","%right '^' '<' '>' TK_GTE TK_LTE TK_NEQUAL TK_EQUAL TK_NOT '='","","%%","","S\t\t\t: TK_TIPO_INT TK_MAIN '(' ')' BLOCO","\t\t\t{","\t\t\t\tcout <<\"\\n\\n/*Compilador Bolado*/\\n\" << \"#include <iostream>\\n#include <string.h>\\n#include <stdio.h>\\n\\n\"  << declararVariaveis() << \"\\nint main(void)\\n{\\n\" << $5.traducao << \"\\treturn 0;\\n}\" << endl;","\t\t\t\t","\t\t\t\tofstream outputFile;","\t\t\t\toutputFile.open(\"src.c\");","\t\t\t\toutputFile <<\"\\n\\n/*Compilador Bolado*/\\n\" << \"#include <iostream>\\n#include <string.h>\\n#include <stdio.h>\\n\\n\"  << declararVariaveis() << \"\\nint main(void)\\n{\\n\" << $5.traducao << \"\\treturn 0;\\n}\" << endl;","\t\t\t\toutputFile.close();","\t\t\t}","\t\t\t","\t\t\t;","","BLOCO\t\t: PUSH_SCOPE '{' COMANDOS '}' POP_SCOPE","\t\t\t{","\t\t\t\t","\t\t\t\t$$.traducao = $3.traducao;","\t\t\t\t","\t\t\t}","\t\t\t;","","PUSH_SCOPE: {","\t\t\t\tVarTable escopo;","\t\t\t\tpushEscopo(pilha,escopo);","\t\t\t\t","\t\t\t\t$$.traducao = \"\";","\t\t\t\t$$.label = \"\";","\t\t\t}","\t\t\t","POP_SCOPE:\t{","\t\t\t\tcout << \"escopoAtual \" << pilha->escopoAtual << endl;","\t\t\t\tcreateVarTableLog(pilha->escopos[pilha->escopoAtual]);","\t\t\t\tpop(pilha);","\t\t\t\t","\t\t\t\t$$.traducao = \"\";","\t\t\t\t$$.label = \"\";","\t\t\t};","","COMANDOS\t: COMANDO COMANDOS","\t\t\t{","","\t\t\t\t$$.traducao = $1.traducao + $2.traducao;","\t\t\t}","\t\t\t|","\t\t\t;","","COMANDO \t: E ';'","\t\t\t| TK_IF '(' E ')' BLOCO","\t\t\t{","\t\t\t\t// VarTable varTableEscopo;","\t\t\t\t// pushEscopo(escopos, varTableEscopo);","","\t\t\t    int teste = checkType($3.tipo, $3.tipo);","","\t\t\t    if (teste != TK_TIPO_BOOL && teste != TK_TIPO_INT){","\t\t\t        puts(\"Invalid Type for the IF Statment\");","\t\t\t        exit(0);","\t\t\t    }","\t\t\t\tstring varName = getVarName();","\t\t\t\tstring gotoLabel = getLabel(TK_IF);","\t\t\t\tstring linha = \"\\t\" + varName + \" = !\" + $3.label + \";\\n\";","\t\t\t\tstring showLabel = \"\\t\"+gotoLabel + \":\\n\\n\";","","\t\t\t\tvariavel v = createVar(varName, getVarType(teste), varName);","\t\t\t\taddVar2Escopo(pilha, v);//[varName] = v;","\t\t\t\tdeclaracoes.push_back(v);","\t\t\t\t","\t\t\t\t//cod patrick","\t\t\t\t// $$.transl = $3.transl + ","\t\t\t\t// \t\t\"\\t\" + var + \" = !\" + $3.label + \";\\n\" +Linha (string)","\t\t\t\t// \t\t\"\\tif (\" + var + \") goto \" + end + \";\\n\" +","\t\t\t\t// \t\t$5.transl +","\t\t\t\t// \t\t\"\\t\" + end + \":\";","","\t\t\t\tstring stmt = \"\\tif(\" + varName + \") \" + \"goto \" + gotoLabel +\";\\n\" + $5.traducao + \"\\n\" + showLabel;","\t\t\t    $$.traducao = $3.traducao + linha + stmt;","","\t\t\t","","\t\t\t}","\t\t\t| TK_WHILE '(' E ')' BLOCO","\t\t\t{","\t\t\t\tint teste = checkType($3.tipo, $3.tipo);","","\t\t\t\tif (teste != TK_TIPO_BOOL && teste != TK_TIPO_INT){","\t\t\t\t\tputs(\"Invalid Type for the WHILE Statment\");","\t\t\t\t\texit(0);","\t\t\t\t}","\t\t\t\tstring varName = getVarName();","\t\t\t\tstring beginLabel = \"inicio\" + getLabel(TK_WHILE);","\t\t\t\tcurLabel--; //Gambiarra para ficar inicio_while_1 e fim_while_1","","\t\t\t\tstring endLabel = \"fim\" + getLabel(TK_WHILE);","","\t\t\t\tstring linha = \"\\t\" + varName + \" = !\" + $3.label + \";\\n\";","\t\t\t\tstring showLabel = \"\\tgoto \"+ beginLabel + \";\\n\\n\";","","\t\t\t\tvariavel v = createVar(varName, getVarType(teste), varName);","\t\t\t\taddVar2Escopo(pilha, v);","\t\t\t\tdeclaracoes.push_back(v);","","\t\t\t\tstring stmt =  \"\\t\" + beginLabel +\":\"+ \"\\tif(\" + varName + \") \" + \"goto \" + endLabel +\";\\n\" + $5.traducao + \"\\n\" + showLabel + \"\\t\" + endLabel + \":\\n\\n\";","\t\t\t    $$.traducao = $3.traducao + linha + stmt;","","","\t\t\t}","","\t\t\t| DECLARATION ';'","\t\t\t{","\t\t\t\t$$ = $1;","\t\t\t\ti++;","\t\t\t}","\t\t\t| ATRIB ';'","\t\t\t{","\t\t\t\t$$ = $1;","\t\t\t\ti++;","\t\t\t}","\t\t\t;","","DECLARATION : TYPE VARLIST","\t\t\t{","\t\t\t\t$2.tipo = $1.tipo;","\t\t\t\t$$.traducao = $1.traducao + $2.traducao;","\t\t\t\t// $$.tipo = ;","\t\t\t}","\t\t\t;","","TYPE\t\t: TK_TIPO_INT","\t\t\t{","\t\t\t\t$$.tipo = TK_TIPO_INT;","\t\t\t\t$$.traducao = $1.traducao;","\t\t\t}","\t\t\t| TK_TIPO_FLOAT","\t\t\t{","\t\t\t\t$$.tipo = TK_TIPO_FLOAT;","\t\t\t\t$$.traducao = $1.traducao;","\t\t\t}","\t\t\t| TK_TIPO_CHAR","\t\t\t{","\t\t\t\t$$.tipo = TK_TIPO_CHAR;","\t\t\t\t$$.traducao = $1.traducao;","\t\t\t}","\t\t\t| TK_TIPO_BOOL","\t\t\t{","\t\t\t\t$$.tipo = TK_TIPO_BOOL;","\t\t\t\t$$.traducao = $1.traducao;","\t\t\t}","\t\t\t;","","VARLIST\t\t: VARLIST ',' TK_ID","\t\t\t{","\t\t\t\tstring varName = getVarName();","\t\t\t\t$$.traducao = $1.traducao + $3.traducao;// +\"\\t\" + getVarType($0.tipo) + \" \"+ varName + \"; \\n\";","\t\t\t\tcreateLog(\"Name\", getVarType($0.tipo) + \" \" + $3.label + \" - \" + varName, appendLogFile);","\t\t\t\tvariavel v = createVar($3.label, getVarType($0.tipo), varName);","\t\t\t\taddVar2Escopo(pilha, v);","\t\t\t\tdeclaracoes.push_back(v);","\t\t\t}","\t\t\t| VARLIST ',' ATRIB","\t\t\t{","\t\t\t\t$$.traducao = $1.traducao + $3.traducao;","\t\t\t\t$1.tipo = $0.tipo;","\t\t\t\t$3.tipo = $0.tipo;","\t\t\t\t// cout << \"Em \" <<$1.label <<\" Tipo do VARLIST em Var, Atrib: \" << getVarType($0.tipo) << \"\\nEm \"<< $3.label<< \" Tipo da Atrib em Var, Atrib: \" << getVarType($3.tipo) << endl;","\t\t\t}","\t\t\t| ATRIB","\t\t\t{","\t\t\t\t$$.traducao = $1.traducao;","\t\t\t\t$$.tipo = $1.tipo;","\t\t\t\ti++;","\t\t\t\tputs(\"nso deveria estar aqui\");","\t\t\t}","\t\t\t|TK_ID","\t\t\t{","\t\t\t\t// COLOCAR no HASH","\t\t\t\tstring varName = getVarName();","\t\t\t\t$$.label = $1.label;","\t\t\t\t$$.traducao = $1.traducao;// + \"\\t\" + getVarType($0.tipo)+ \" \"+ varName + \"; \\n\";","\t\t\t\tcreateLog(\"Name\", getVarType($0.tipo) + \" \"+ $$.label + \" - \" + varName, appendLogFile);","\t\t\t\tvariavel v = createVar($$.label, getVarType($0.tipo), varName);","\t\t\t\t// std::cout << \"Tipo \" << getVarType($0.tipo) << \" com i = \"<< i<< std::endl;","\t\t\t\taddVar2Escopo(pilha, v);;","\t\t\t\tdeclaracoes.push_back(v);","\t\t\t}","\t\t\t;","","ATRIB \t\t: TK_ID '=' E","\t\t\t{","\t\t\t\tvariavel var = getVarOnStack($1.label);","\t\t\t\tstring varName = var.nome_temp;","","\t\t\t\tstring infere_tipo = \"\", store = \"\";","\t\t\t\t//variavel v;","","\t\t\t\tstd::cout << \"TK_ID = E\" << endl;","","\t\t\t\t//variavel n existe na tabela","\t\t\t\tif(varName == \"\"){","\t\t\t\t\tvarName = getVarName();","\t\t\t\t\t// cout << \"ENTREI NO IF \" <<getVarType($0.tipo) << endl;","","\t\t\t\t\tif(getVarType($0.tipo) != \"\"){","\t\t\t\t\t\tcout << \"$0 tipo nao vazio\" << endl;","\t\t\t\t\t\tinfere_tipo = getVarType($0.tipo);","\t\t\t\t\t\t","\t\t\t\t\t}","\t\t\t\t\telse{","\t\t\t\t\t\tcout << \"$0 tipo vazio\" << endl;","\t\t\t\t\t\tinfere_tipo = getVarType($3.tipo);","\t\t\t\t\t\t","\t\t\t\t\t}","","\t\t\t\t\tvar = createVar($$.label, infere_tipo, varName);","","\t\t\t\t\t// std::cout << \"Tipo \" << getVarType($0.tipo) << \" com i = \"<< i<< std::endl;","\t\t\t\t\t// std::cout << \"(VAR3) Tipo \" << getVarType($3.tipo) << \" com i = \"<< i<< std::endl;","","\t\t\t\t\taddVar2Escopo(pilha, var);","\t\t\t\t\tdeclaracoes.push_back(var);","","\t\t\t\t\t","\t\t\t\t}","\t\t\t\t","\t\t\t\t// Cast na atribuição com Temp \"Store\"","\t\t\t\tif( (getVarOnStack($1.label).tipo != getVarType($3.tipo) ) ){","\t\t\t\t\t// std::cout << \"Convert Tipo da \" << $1.label << \"    Tipo: \" << varTable[$1.label].tipo  << std::endl;","\t\t\t\t\tstore = getVarName();","\t\t\t\t\tstring linha =  store + \" = (\" +getVarOnStack($1.label).tipo+\") \" + $3.label + \";\\n\";","\t\t\t\t\tstring linha2 = \"\\t\"  + varName + \" = \" + store + \";\\n\";","\t\t\t\t\t$$.traducao = $1.traducao + $3.traducao + \"\\t\"  + linha + linha2;","","\t\t\t\t\tvariavel v = createVar(store, getVarOnStack($1.label).tipo,store);","","\t\t\t\t\taddVar2Escopo(pilha, v);","\t\t\t\t\tdeclaracoes.push_back(v);","\t\t\t\t}","\t\t\t\t// Tipo Inferido ou cast não necessário","\t\t\t\telse","\t\t\t\t\t$$.traducao = $1.traducao + $3.traducao+ \"\\t\" + varName  + \" = \" + $3.label +\";\\n\";","","\t\t\t\ti++;","\t\t\t\tcreateLog(\"Name\", getVarType($3.tipo) + \" \"+ $$.label + \" - \" + varName, appendLogFile);","\t\t\t}","\t\t\t;","","E \t\t\t: '('E')'{","","\t\t\t\t$$ = $2;","\t\t\t}","\t\t\t| '-' E{","\t\t\t\t$$.tipo = $2.tipo;","\t\t\t\tstring varName = getVarName();","\t\t\t\t$$.label = '-' + $2.label;","\t\t\t\t$$.traducao = $2.traducao + \"\\t\" + varName +\" = \" + \"-\" + $2.label +\";\\n\";","\t\t\t\tvariavel v = createVar(varName, getVarType($$.tipo), varName);","\t\t\t\taddVar2Escopo(pilha, v);","\t\t\t\tdeclaracoes.push_back(v);","","\t\t\t}"," \t\t\t| E '+' E","\t\t\t{","\t\t\t\t$$ = castArith($1, $3, \"+\");","\t\t\t}","\t\t\t| E '-' E","\t\t\t{","\t\t\t\t$$ = castArith($1, $3, \"-\");","\t\t\t}","\t\t\t| E '*' E","\t\t\t{","\t\t\t\t$$ = castArith($1, $3, \"*\");","\t\t\t}","\t\t\t| E '/' E","\t\t\t{","\t\t\t\t$$ = castArith($1, $3, \"/\");","\t\t\t}","\t\t\t// | E '^' E","\t\t\t// {","\t\t\t// \t$$.tipo = checkType($1.tipo, $3.tipo);","\t\t\t// \tstring varName = getVarName();","\t\t\t// \t$$.traducao = $1.traducao + $3.traducao + \"\\t\" +getVarType($$.tipo)+ \" \" + varName +\" = \" + \"pow (\"+ $1.label +\" , \"+ $3.label + \")\"+\";\\n\";","\t\t\t// \t$$.label = varName;","\t\t\t//","\t\t\t// }","\t\t\t| E '>' E","\t\t\t{","\t\t\t\t$$.tipo = TK_TIPO_BOOL;","\t\t\t\tatributos atr = castFunction($1.tipo, $1.label, $3.tipo, $3.label, $$.tipo, \">\");","\t\t\t\t$$.traducao = $1.traducao + $3.traducao + atr.traducao;","\t\t\t\t$$.label = atr.label;","","\t\t\t}","\t\t\t| E '<' E","\t\t\t{","\t\t\t\t$$.tipo = TK_TIPO_BOOL;","\t\t\t\tatributos atr = castFunction($1.tipo, $1.label, $3.tipo, $3.label, $$.tipo, \"<\");","\t\t\t\t$$.traducao = $1.traducao + $3.traducao + atr.traducao;","\t\t\t\t$$.label = atr.label;","\t\t\t}","\t\t\t| E TK_GTE E","\t\t\t{","\t\t\t\t$$.tipo = TK_TIPO_BOOL;","\t\t\t\tatributos atr = castFunction($1.tipo, $1.label, $3.tipo, $3.label, $$.tipo, \">=\");","\t\t\t\t$$.traducao = $1.traducao + $3.traducao + atr.traducao;","\t\t\t\t$$.label = atr.label;","\t\t\t}","\t\t\t| E TK_LTE E","\t\t\t{","\t\t\t\t$$.tipo = TK_TIPO_BOOL;","\t\t\t\tatributos atr = castFunction($1.tipo, $1.label, $3.tipo, $3.label, $$.tipo, \"<=\");","\t\t\t\t$$.traducao = $1.traducao + $3.traducao + atr.traducao;","\t\t\t\t$$.label = atr.label;","\t\t\t}","\t\t\t| E TK_EQUAL E","\t\t\t{","\t\t\t\t$$.tipo = TK_TIPO_BOOL;","\t\t\t\tatributos atr = castFunction($1.tipo, $1.label, $3.tipo, $3.label, $$.tipo, \"==\");","\t\t\t\t$$.traducao = $1.traducao + $3.traducao + atr.traducao;","\t\t\t\t$$.label = atr.label;","\t\t\t}","\t\t\t| E TK_NEQUAL E","\t\t\t{","\t\t\t\t$$.tipo = TK_TIPO_BOOL;","\t\t\t\tatributos atr = castFunction($1.tipo, $1.label, $3.tipo, $3.label, $$.tipo, \"!=\");","\t\t\t\t$$.traducao = $1.traducao + $3.traducao + atr.traducao;","\t\t\t\t$$.label = atr.label;","\t\t\t}","\t\t\t| E TK_AND E","\t\t\t{","\t\t\t\t$$.tipo = TK_TIPO_BOOL;","\t\t\t\t$$.tipo = checkType($1.tipo, $3.tipo);","\t\t\t\tstring varName = getVarName();","\t\t\t\t$$.traducao = $1.traducao + $3.traducao + \"\\t\"+getVarType($$.tipo)+ \" \" +  varName +\" = \"+ $1.label +\" && \"+ $3.label +\";\\n\";","\t\t\t\t$$.label = varName;","\t\t\t}","\t\t\t| E TK_OR E","\t\t\t{","\t\t\t\t$$.tipo = TK_TIPO_BOOL;","\t\t\t\t$$.tipo = checkType($1.tipo, $3.tipo);","\t\t\t\tstring varName = getVarName();","\t\t\t\t$$.traducao = $1.traducao + $3.traducao + \"\\t\"+getVarType($$.tipo)+ \" \" +  varName +\" = \"+ $1.label +\" || \"+ $3.label +\";\\n\";","\t\t\t\t$$.label = varName;","\t\t\t}","\t\t\t| TK_NOT E","\t\t\t{","\t\t\t\t$$.tipo = checkType($2.tipo, $2.tipo);","\t\t\t\tstring varName = getVarName();","\t\t\t\t$$.traducao = $2.traducao + \"\\t\"+getVarType($$.tipo)+ \" \" +  varName +\" = \" \"! \"+ $2.label +\";\\n\";","\t\t\t\t$$.label = varName;","\t\t\t}","\t\t\t| TK_REAL","\t\t\t{","\t\t\t\t$$.tipo = TK_TIPO_FLOAT;","\t\t\t\tstring varName = getVarName();","\t\t\t\t$$.traducao = \"\\t\" +varName + \" = \" + $1.label + \";\\n\";","\t\t\t\t$$.label = varName;","","\t\t\t\tvariavel v = createVar(varName, getVarType($$.tipo), varName);","\t\t\t\taddVar2Escopo(pilha, v);","\t\t\t\tdeclaracoes.push_back(v);","\t\t\t}","\t\t\t| TK_NUM","\t\t\t{","\t\t\t\t$$.tipo = TK_TIPO_INT;","\t\t\t\tstring varName = getVarName();","\t\t\t\t$$.traducao = \"\\t\" +varName + \" = \" + $1.label + \";\\n\";","\t\t\t\t$$.label = varName;","\t\t\t\tvariavel v = createVar(varName, getVarType($$.tipo), varName);","\t\t\t\taddVar2Escopo(pilha, v);","\t\t\t\tdeclaracoes.push_back(v);","\t\t\t}","\t\t\t| TK_BOOL","\t\t\t{","\t\t\t\t$$.tipo = TK_TIPO_BOOL;","\t\t\t\tstring varName = getVarName();","\t\t\t\t// puts(\"Estou aqui\");","\t\t\t\t$$.traducao = \"\\t\" + varName+ \" = \" + $1.label + \";\\n\";","\t\t\t\t$$.label = varName;","\t\t\t\tvariavel v = createVar(varName, getVarType($$.tipo), varName);","\t\t\t\taddVar2Escopo(pilha, v);","\t\t\t\tdeclaracoes.push_back(v);","\t\t\t}","\t\t\t| TK_CHAR","\t\t\t{","\t\t\t\t// puts(\"Estou aqui\");","\t\t\t\t$$.tipo = TK_TIPO_CHAR;","\t\t\t\tstring varName = getVarName();","\t\t\t\t$$.traducao = \"\\t\" + varName + \" = \" + $1.label + \";\\n\";","\t\t\t\t$$.label = varName;","\t\t\t\tvariavel v = createVar(varName, getVarType($$.tipo), varName);","\t\t\t\taddVar2Escopo(pilha, v);","\t\t\t\tdeclaracoes.push_back(v);","\t\t\t}","\t\t\t| TK_ID","\t\t\t{","\t\t\t\tvariavel v = getVarOnStack($1.label);","\t\t\t\tstring id = v.nome_temp;","","\t\t\t\tif (id == \"\"){","\t\t\t\t\tcout << \"Erro de Compilação Variavel '\" << $1.label << \"' inexistente\" <<endl;","\t\t\t\t\texit(0);","\t\t\t\t}","\t\t\t\telse{","","\t\t\t\t\t$$.traducao = $1.traducao;","\t\t\t\t\t$$.label = id;","\t\t\t\t\t$$.tipo = getTokenType(v.tipo);","\t\t\t\t\tcout << \"REGRA TK_ID: \" <<$$.label << $$.tipo <<\": \"+v.tipo << endl;","\t\t\t\t}","\t\t\t}","\t\t\t;","","%%","","#include \"lex.yy.c\"","","int yyparse();","","int main( int argc, char* argv[] )","{","","\t// Criando escopo Globais","\t// std::cout << pilha->escopoAtual << std::endl;","\t// pushEscopo(pilha, escopoGlobal);","\t// std::cout << pilha->escopoAtual << std::endl;","","\t//criar datamap em arquivo","\tyyparse();","\t// show content:","","","","\t// createLog(\"varTable\", linhas, false);","\t//createVarTableLog();","","\treturn 0;","}","","string declararVariaveis(){","\treturn getDeclaracoes(declaracoes);","}","","void yyerror( string MSG )","{","\tcout << MSG << endl;","\texit (0);","}","","int getTokenType(string type){","\tif(type == \"int\")","\t\treturn TK_TIPO_INT;","\tif(type ==  \"float\")","\t\treturn TK_TIPO_FLOAT;","\tif(type == \"char\")","\t\treturn TK_TIPO_CHAR;","\tif(type == \"bool\")","\t\treturn TK_TIPO_INT;","","}","","string getVarType(int type){","\tif(type == TK_TIPO_INT)","\t\treturn \"int\";","\tif(type == TK_TIPO_FLOAT )","\t\treturn \"float\";","\tif(type == TK_TIPO_CHAR)","\t\treturn \"char\";","\tif(type == TK_TIPO_BOOL)","\t\treturn \"int\";","\t","\treturn \"\";\t","\t//return \"undefined\";","}","","int checkType (int t1, int t3){","","\t//cout << \"Tipo1 \" << getVarType(t1) << \"Tipo3 \" << getVarType(t3) << endl;","\tif ( (t1 != TK_TIPO_INT && t1 != TK_TIPO_FLOAT) || (t3 != TK_TIPO_INT && t3 != TK_TIPO_FLOAT) ) {","","\t\tif (t1 == TK_TIPO_BOOL && t3 == TK_TIPO_BOOL)","\t\t\treturn TK_TIPO_BOOL;","","\t\telse if (t1 == TK_TIPO_CHAR && t3 == TK_TIPO_CHAR)","\t\t\treturn TK_TIPO_CHAR;","","\t\tputs(\"Invalid Type for the Operation\");","\t\t//exit(0);","\t}","\telse if (t1 == TK_TIPO_FLOAT || t3 == TK_TIPO_FLOAT){","","\t\treturn TK_TIPO_FLOAT;","","\t}","\telse{","","\t\treturn TK_TIPO_INT;","\t}","}","","atributos castFunction(int t1, string t1_label, int t3, string t3_label, int t0, string sinal){","\tint teste = checkType(t1, t3);","\tstring linha = \"\", linha2 = \"\";","","\tstring varName = getVarName();","\tatributos retorno;","","\tif (teste == TK_TIPO_FLOAT){","","\t\tstring store = getVarName();","\t\tretorno.label = store;","","\t\tvariavel v = createVar(varName, getVarType(teste), varName);","\t\taddVar2Escopo(pilha, v);","\t\tdeclaracoes.push_back(v);","\t\tv = createVar(store, getVarType(teste), store);","\t\taddVar2Escopo(pilha, v);","\t\tdeclaracoes.push_back(v);","","\t\tif(t1 == TK_TIPO_INT){","\t\t\tlinha = \"\\t\" + varName + \" = (float) \" + t1_label +\";\\n\";","\t\t\tlinha2 = \"\\t\" + store +\" = \"+ varName + \" \" + sinal + \" \" +t3_label +\";\\n\";","\t\t}","\t\telse if (t3 == TK_TIPO_INT){","\t\t\tlinha = \"\\tfloat \" + varName + \" = (float) \" + t3_label +\";\\n\";","\t\t\tlinha2 = \"\\t\" + store +\" = \"+ t1_label + \" \" + sinal + \" \" + varName +\";\\n\";","\t\t}","\t}","\telse if (teste == TK_TIPO_INT){","\t\tretorno.label = varName;","\t\tlinha2 = \"\\t\" + varName +\" = \"+ t1_label + \" \" + sinal + \" \" + t3_label +\";\\n\";","\t\tvariavel v = createVar(varName, getVarType(teste), varName);","\t\taddVar2Escopo(pilha, v);","\t\tdeclaracoes.push_back(v);","\t}","","\tretorno.traducao = linha + linha2;","\tretorno.tipo = t0;","\treturn retorno;","","}","","atributos castFunctionArith(int t1, string t1_label, int t3, string t3_label, int t0, string sinal){","\tint teste = checkType(t1, t3);","\tstring linha = \"\", linha2 = \"\";","","\tstring varName = getVarName();","\tstring store = getVarName();","\tif (teste == TK_TIPO_FLOAT){","","\t\tvariavel v = createVar(varName, getVarType(teste), varName);","\t\taddVar2Escopo(pilha, v);","\t\tdeclaracoes.push_back(v);","\t\tv = createVar(store, getVarType(teste), store);","\t\taddVar2Escopo(pilha, v);","\t\tdeclaracoes.push_back(v);","","\t\tif(t1 == TK_TIPO_INT){","\t\t\tlinha = \"\\t\" + varName + \" = (float) \" + t1_label +\";\\n\";","\t\t\tlinha2 = \"\\t\" + store +\" = \"+ varName + \" \" + sinal + \" \" +t3_label +\";\\n\";","\t\t}","\t\telse if (t3 == TK_TIPO_INT){","\t\t\tlinha = \"\\t\" + varName + \" = (float) \" + t3_label +\";\\n\";","\t\t\tlinha2 = \"\\t\" + store +\" = \"+ t1_label + \" \" + sinal + \" \" + varName +\";\\n\";","\t\t}","\t}","\tatributos retorno;","\tretorno.traducao = linha + linha2;","\tretorno.label = store;","\tretorno.tipo = t0;","\treturn retorno;","","}","","int checkTypeArith(int t1, int t3){","\tif ( (t1 != TK_TIPO_INT && t1 != TK_TIPO_FLOAT) || (t3 != TK_TIPO_INT && t3 != TK_TIPO_FLOAT) ) {","\t\tputs(\"Invalid Types for Arithmetics Operators!\");","","\t\tcout << \"TIPOS DE T1 E T3 \" << t1 << \" \" << t3 << endl;","\t\texit(0);","","\t}","\tif(t1 == TK_TIPO_FLOAT || t3 == TK_TIPO_FLOAT)","\t\treturn TK_TIPO_FLOAT;","","\telse","\t\treturn TK_TIPO_INT;","}","","void createLog (string name, string toWrite, bool append){","","\tFILE *p_arquivo;","\t//char *nome = \"arquivo.txt\";","\tstring parameter = \"w\";","","\tif(append)","\t\tparameter = \"a\";","","\tif((p_arquivo = fopen(name.c_str(), parameter.c_str()) ) == NULL)","\t{","\t\tprintf(\"\\n\\nNao foi possivel abrir o arquivo.\\n\");","\t\treturn;","\t}","","","\tfprintf(p_arquivo,\"%s\\n\", toWrite.c_str());","","\tfclose(p_arquivo);","","}","","void createVarTableLog (VarTable escopo){","","\tstring linhas;","\t// for (int i = 0; i < pilha->escopos.size(); i++){","\t// \tVarTable varTable = pilha->escopos[i];","\tlinhas += \"Escopo \" + to_string(pilha->escopoAtual) + \"\\n\";","","\t// \t// linhas += \"\\n\";","\tfor (std::map<string,variavel>::iterator it=escopo.begin(); it!=escopo.end(); ++it){","\t\tvariavel var = it->second;","\t\tlinhas += var.tipo + \"\\t\" + var.nome_var + \"\\t\" + var.nome_temp + \"\\n\";","\t}","\tlinhas += \"\\n\";","\t// }","","\tcreateLog(\"varTable\", linhas, true);","}","variavel getVarOnStack(string label){","","\t","\tcout <<  \" GET TEMP ON TABLE: buscando: \" << label<< \" ESCOPO ATUAL  \" << pilha->escopoAtual << endl;","","\tfor (int i = pilha->escopoAtual; i >= 0 ; i--)","\t{\t","\t\tVarTable varTable = pilha->escopos[i];","\t\tcout<< \"buscando no Escopo: \" << i <<endl;","\t\tfor (std::map<string,variavel>::iterator it=varTable.begin(); it!=varTable.end(); ++it){","\t\t\tvariavel var = it->second;","\t\t\tcout << var.tipo + \"\\t\" + var.nome_var + \"\\t\" + var.nome_temp + \"\\n\" << endl;","\t\t}","\t}","","","\tVarTable varTable = pilha->escopos[pilha->escopoAtual];","\tif ( varTable.count(label) ){","\t\t//variavel ja foi declarada","\t\tcout<< \"achei \" << label << \" no escopo atual\" << endl;","\t\treturn varTable[label];","\t}else{","\t\tint escopo = pilha->escopoAtual-1;","\t\tfor(int i = escopo; i > -1; i--){","\t\t\tVarTable varTable = pilha->escopos[i];","\t\t\tif ( varTable.count(label) ){","\t\t\t\t//variavel ja foi declarada","\t\t\t\tcout<< \"achei \" << label << \" no escopo \" << i << endl;","\t\t\t\tcout << varTable[label].nome_temp << \" \" << varTable[label].tipo << endl;","\t\t\t\treturn varTable[label];","\t\t\t}","\t\t}","\t\tcout << \"nao achei \" << label << endl;","","\t\treturn createVar(\"\", \"\",\"\");","\t}","","","\t// cout << \"Nein Nein Nein variavel \"<< label << endl;","\t// exit(0);\t","","}","","atributos castArith(atributos s1, atributos s3, string sinal){","","\tatributos ss;","\tss.tipo = checkTypeArith(s1.tipo, s3.tipo);","\t//Sem Cast","\tif (s1.tipo == s3.tipo){","\t\tstring varName = getVarName();","\t\tss.traducao = s1.traducao + s3.traducao + \"\\t\" + varName + \" = \"+ s1.label +\" \" + sinal + \" \"+ s3.label +\";\\n\";","\t\tss.label = varName;","","\t\tvariavel v = createVar(varName, getVarType(ss.tipo), varName);","\t\t//varTable[varName] = v;","\t\taddVar2Escopo(pilha, v);","\t\tdeclaracoes.push_back(v);","\t}","\t//Com cast","\telse{","\t\tatributos atr = castFunctionArith(s1.tipo, s1.label, s3.tipo, s3.label, ss.tipo, sinal);","\t\tss.traducao = s1.traducao + s3.traducao + atr.traducao;","\t\tss.label = atr.label;","\t}","\treturn ss;","","}","","string getLabel(int token){","","\tif (token == TK_IF)","\t\treturn \"fim_if_\" + to_string(++curLabel);","","\telse if (token == TK_WHILE)","\t\treturn \"_while_\" + to_string(++curLabel);","}",""],"id":1}]]},"ace":{"folds":[],"scrolltop":10619,"scrollleft":0,"selection":{"start":{"row":786,"column":0},"end":{"row":786,"column":0},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":{"row":757,"mode":"ace/mode/text"}},"timestamp":1486176673057}
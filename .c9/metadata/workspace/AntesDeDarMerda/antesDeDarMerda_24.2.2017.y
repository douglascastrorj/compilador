{"filter":false,"title":"antesDeDarMerda_24.2.2017.y","tooltip":"/AntesDeDarMerda/antesDeDarMerda_24.2.2017.y","undoManager":{"mark":0,"position":0,"stack":[[{"start":{"row":0,"column":0},"end":{"row":1687,"column":0},"action":"insert","lines":["//Mexer no BOOLEAN","","%{","#include <iostream>","#include <string>","#include <sstream>","#include <fstream>","#include <map>","#include <stdio.h>","#include \"escopo.h\"","#include \"loopStack.h\"","","#define YYSTYPE atributos","","using namespace std;","","","string gambiarra_print = \"\";","string gambiarra_read = \"\";","","//Variaveis Globais","bool appendLogFile = true; //falso apaga a porra toda do arquivo, DEIXE TRUE","int curVar = 0;","int curLabel = 0;","int i = 0;","struct atributos","{","\tstring label;","\tstring traducao;","\tint tipo;","\tint tamanho;","};","","typedef struct atributos atributos;","","//std::map<string, variavel> varTable;","map_stack* pilha = createMapStack();","LoopStack* pilhaLoops = createLoopStack();","","","","//VarTable escopoGlobal;","// pushEscopo(pilha, escopoGlobal);","","Declaracoes declaracoes;","","","","// Functions","variavel getVarOnStack(string label);","string getVarType(int);","int checkType(int, int);","atributos castFunction(int, string, int, string, int, string);","void createLog (string name, string toWrite, bool);","int getTokenType(string);","int checkTypeArith(int, int);","atributos castArith(atributos, atributos, string);","atributos castFunctionArith(int, string, int, string, int, string);","string declararVariaveis();","string getLabel(int);","atributos concatString (atributos,atributos);","int getNumber(string str);","","void createVarTableLog(VarTable);","","int yylex(void);","void yyerror(string);","","","string getVarName(){","\treturn \"temp\" + to_string(++curVar);","}","","","","%}","","%token TK_NUM TK_REAL TK_CHAR TK_BOOL TK_STRING TK_GLOBAL","%token TK_MAIN TK_ID TK_TIPO_INT TK_TIPO_FLOAT TK_TIPO_CHAR TK_TIPO_BOOL TK_TIPO_STRING","%token TK_FIM TK_ERROR","%token TK_EQUAL TK_GTE TK_LTE TK_NEQUAL TK_MAIOR TK_MENOR","%token TK_AND TK_OR TK_NOT","%token TK_IF TK_WHILE TK_DO TK_FOR  TK_ELSE","%token TK_BREAK TK_BREAK_ALL TK_BREAK_FUNC TK_CONTINUE ","%token TK_PRINT TK_READ","%token TK_PP TK_MM","","%start S","%left ')'","%left '+' '-'","%left '*' '/'","%left '('","%right '^' '<' '>' TK_GTE TK_LTE TK_NEQUAL TK_EQUAL TK_NOT '='","","%%","","S\t\t\t: PUSH_SCOPE T POP_SCOPE","\t\t\t{","\t\t\t\t$$.traducao = $2.traducao;","\t\t\t}","\t\t\t","\t\t\t;","","T\t\t\t:TK_TIPO_INT TK_MAIN '(' ')' BLOCO","\t\t\t{ ","\t\t\t\tcout <<\"\\n\\n/*Compilador Bolado*/\\n\" << \"#include <iostream>\\n#include <string.h>\\n#include <stdio.h>\\n#include <stdlib.h>\\n\\n\"  << declararVariaveis() << \"\\nint main(void)\\n{\\n\" << $5.traducao << \"\\treturn 0;\\n}\" << endl;","\t\t\t\t","\t\t\t\tofstream outputFile;","\t\t\t\toutputFile.open(\"src.c\");","\t\t\t\toutputFile <<\"\\n\\n/*Compilador Bolado*/\\n\" << \"#include <iostream>\\n#include <string.h>\\n#include <stdio.h>\\n#include <stdlib.h>\\n\\n\"  << declararVariaveis() << \"\\nint main(void)\\n{\\n\" << $5.traducao << \"\\treturn 0;\\n}\" << endl;","\t\t\t\toutputFile.close();","\t\t\t}","\t\t\t;","","BLOCO\t\t: PUSH_SCOPE '{' COMANDOS '}' POP_SCOPE","\t\t\t{","\t\t\t\t","\t\t\t\t$$.traducao = $3.traducao;","\t\t\t\t","\t\t\t}","\t\t\t;","","PUSH_SCOPE: {","\t\t\t\tVarTable escopo;","\t\t\t\tpushEscopo(pilha,escopo);","\t\t\t\t","\t\t\t\t$$.traducao = \"\";","\t\t\t\t$$.label = \"\";","\t\t\t}","\t\t\t","POP_SCOPE:\t{","\t\t\t//\tcout << \"escopoAtual \" << pilha->escopoAtual << endl;","\t\t\t\tcreateVarTableLog(pilha->escopos[pilha->escopoAtual]);","\t\t\t\tpop(pilha);","\t\t\t\t","\t\t\t\t$$.traducao = \"\";","\t\t\t\t$$.label = \"\";","\t\t\t};","","COMANDOS\t: COMANDO COMANDOS","\t\t\t{","","\t\t\t\t$$.traducao = $1.traducao + $2.traducao;","\t\t\t\t","\t\t\t\t//cout << \"Traducao Comandos\" << endl << $2.traducao << endl;","\t\t\t}","\t\t\t|","\t\t\t{","\t\t\t\t$$.traducao = \"\";","\t\t\t}","\t\t\t;","","COMANDO \t: E ';'","\t\t\t| TK_IF '(' E ')' BLOCO","\t\t\t{","\t\t\t\t// VarTable varTableEscopo;","\t\t\t\t// pushEscopo(escopos, varTableEscopo);","","\t\t\t    int teste = checkType($3.tipo, $3.tipo);","","\t\t\t    if (teste != TK_TIPO_BOOL && teste != TK_TIPO_INT){","\t\t\t        puts(\"Invalid Type for the IF Statment\");","\t\t\t        exit(0);","\t\t\t    }","\t\t\t\tstring varName = getVarName();","\t\t\t\tstring gotoLabel = getLabel(TK_IF);","\t\t\t\tstring linha = \"\\t\" + varName + \" = !\" + $3.label + \";\\n\";","\t\t\t\tstring showLabel = \"\\t\"+gotoLabel + \":\\n\\n\";","","\t\t\t\tvariavel v = createVar(varName, getVarType(teste), varName);","\t\t\t\taddVar2Escopo(pilha, v);//[varName] = v;","\t\t\t\tdeclaracoes.push_back(v);","","\t\t\t\tstring stmt = \"\\tif(\" + varName + \") \" + \"goto \" + gotoLabel +\";\\n\" + $5.traducao + \"\\n\" + showLabel;","\t\t\t    $$.traducao = $3.traducao + linha + stmt;","\t\t\t}","\t\t\t| TK_IF '(' E ')' BLOCO TK_ELSE BLOCO","\t\t\t{","\t\t\t\t// VarTable varTableEscopo;","\t\t\t\t// pushEscopo(escopos, varTableEscopo);","","\t\t\t    int teste = checkType($3.tipo, $3.tipo);","","\t\t\t    if (teste != TK_TIPO_BOOL && teste != TK_TIPO_INT){","\t\t\t        puts(\"Invalid Type for the IF Statment\");","\t\t\t        exit(0);","\t\t\t    }","\t\t\t\tstring varName = getVarName();","\t\t\t\t//END_IF","\t\t\t\tstring gotoLabel = getLabel(TK_IF);","\t\t\t\t","\t\t\t\t//INICIO_ELSE","\t\t\t\t","\t\t\t\tstring inicio_else = \"inicio_else_\" + to_string(curLabel);","\t\t\t\t","\t\t\t\t","\t\t\t\tstring linha = \"\\t\" + varName + \" = !\" + $3.label + \";\\n\";","\t\t\t\t//string showLabel = gotoLabel + \":\\n\\n\";","","\t\t\t\tvariavel v = createVar(varName, getVarType(teste), varName);","\t\t\t\taddVar2Escopo(pilha, v);//[varName] = v;","\t\t\t\tdeclaracoes.push_back(v);","","\t\t\t\tstring stmt = \"\\tif(\" + varName + \") \" + \"goto \" + inicio_else +\";\\n\" + $5.traducao + \"\\n\\tgoto \" + gotoLabel + \";\\n\\t\" + inicio_else + \":\\n\" + $7.traducao + \"\\n\\t\" + gotoLabel + \":\\n\";","\t\t\t\t","\t\t\t\t","\t\t\t    $$.traducao = $3.traducao + linha + stmt;","\t\t\t}","\t\t\t| PUSH_LOOP LOOP POP_LOOP","\t\t\t{","\t\t\t\t$$.traducao = $2.traducao;","\t\t\t\t","\t\t\t\t//cout << \"Traducao do Push_Loop_Pop \" << \"\\n\" << $2.traducao << endl;","\t\t\t}","\t\t\t| DECLARATION ';'","\t\t\t{","\t\t\t\t$$ = $1;","\t\t\t\ti++;","\t\t\t}","\t\t\t| ATRIB ';'","\t\t\t{","\t\t\t\t$$ = $1;","\t\t\t\ti++;","\t\t\t}","\t\t\t| PRINT ';' ","\t\t\t{","\t\t\t\t$$ = $1;","\t\t\t\tgambiarra_print = \"\";","\t\t\t}","\t\t\t| READ ';'","\t\t\t{","\t\t\t\t$$ = $1;\t","\t\t\t}","\t\t\t| TK_BREAK ';'{","\t\t\t \t","\t\t\t \tif(pilhaLoops->loops.empty()){","\t\t\t \t\tcout << \"Erro de compilação. 'break' deveria estar dentro de um laço de repetição \";","\t\t\t \t\texit(0);","\t\t\t \t}else{","\t\t\t \t\tLoop loopAtual = getLoop(pilhaLoops);","\t\t\t \t\t$$.traducao = \"\\tgoto \" + loopAtual.endLabel+\";//break comum\\n\";","\t\t\t \t}","\t\t\t \t","\t\t\t }","\t\t\t| TK_BREAK_ALL ';'{","\t\t\t \t","\t\t\t \tif(pilhaLoops->loops.empty()){","\t\t\t \t\tcout << \"Erro de compilação. 'break' deveria estar dentro de um laço de repetição \";","\t\t\t \t\texit(0);","\t\t\t \t}else{","\t\t\t \t\tLoop loopMaisExterno = pilhaLoops->loops[0];","\t\t\t \t\t$$.traducao = \"\\tgoto \" + loopMaisExterno.endLabel+\";//break all\\n\";","\t\t\t \t}","\t\t\t \t","\t\t\t }","\t\t\t| TK_BREAK_FUNC ';' {","\t\t\t \t","\t\t\t \tcout << \"Break func \" << $1.label << \" parametro \" << getNumber($1.label) << endl;","\t\t\t \t$$.traducao = $1.traducao;","\t\t\t ","\t\t\t \tint parametro_break = getNumber($1.label);","\t\t\t \tif(pilhaLoops->loops.size() < parametro_break ){","\t\t\t \t\tcout << \"Erro de compilação. 'break' deveria estar dentro de um laço de repetição \";","\t\t\t \t\texit(0);","\t\t\t \t}else{","\t\t\t \t\tLoop loop = pilhaLoops->loops[ pilhaLoops->loops.size() - parametro_break ];","\t\t\t \t\t$$.traducao = \"\\tgoto \" + loop.endLabel+\";//break_func\\n\";","\t\t\t \t\t","\t\t\t \t\t//std::cout << \"DANDO GO TO PARA \" << loop.beginLabel << std::endl;","\t\t\t \t}","\t\t\t \t","\t\t\t} ","\t\t\t| TK_CONTINUE ';'{","\t\t\t\t","\t\t\t\t if(pilhaLoops->loops.empty()){","\t\t\t \t\tcout << \"Erro de compilação. 'continue' deveria estar dentro de um laço de repetição \";","\t\t\t \t\texit(0);","\t\t\t \t}else{","\t\t\t \t\tLoop loopAtual = getLoop(pilhaLoops);","\t\t\t \t\t$$.traducao = \"\\tgoto \" + loopAtual.continueLabel + \";//continue comum\\n\";","\t\t\t \t}\t\t\t","\t\t\t}","\t\t\t| GLOBAL ';'","\t\t\t{","\t\t\t\t$$ = $1;\t","\t\t\t}","\t\t\t| OPERADOR_UNARIO ';'","\t\t\t{","\t\t\t\t$$ = $1;","\t\t\t}","\t\t\t| OPERADOR_COMPOSTO ';'","\t\t\t{","\t\t\t\t","\t\t\t\t$$ = $1;","\t\t\t}","","\t\t\t;","\t\t\t","OPERADOR_COMPOSTO:\tTK_ID '+' '=' E ","\t\t\t\t\t{","\t\t\t\t\t\tvariavel var = getVarOnStack($1.label);","\t\t\t\t\t\tif(var.tipo != getVarType(TK_TIPO_INT) && var.tipo != getVarType(TK_TIPO_FLOAT)){","\t\t\t\t\t\t\tcout << \"operador += não é permitido para o tipo \" << var.tipo << endl;","\t\t\t\t\t\t\texit(0);","\t\t\t\t\t\t}","\t\t\t\t\t\t","\t\t\t\t\t\t//caminho feliz","\t\t\t\t\t\t//string linha = $1.label + \" = \" + $1.label + \" + \" + $3.label; ","","\t\t\t\t\t\t","\t\t\t\t\t\t// Cast na atribuição com Temp \"Store\"","\t\t\t\t\t\tif( var.tipo != getVarType($4.tipo) ) {","\t\t\t\t\t\t\t// std::cout << \"Convert Tipo da \" << $1.label << \"    Tipo: \" << varTable[$1.label].tipo  << std::endl;","\t\t\t\t\t\t\t","\t\t\t\t\t\t\t//string varName;","\t\t\t\t\t\t\tstring store = getVarName();","\t\t\t\t\t\t\tstring linha =  store + \" = (\" +var.tipo+\") \" + $4.label + \";\\n\";","\t\t\t\t\t\t\tstring linha2 = \"\\t\"  + var.nome_temp + \" = \" + store + \";\\n\";","\t\t\t\t\t\t\t","\t\t\t\t\t\t\t$$.traducao = $1.traducao + $4.traducao + \"\\t\"  + linha + linha2;","\t\t","\t\t\t\t\t\t\tvariavel v = createVar(store, getVarOnStack($1.label).tipo,store);","\t\t","\t\t\t\t\t\t\taddVar2Escopo(pilha, v);","\t\t\t\t\t\t\tdeclaracoes.push_back(v);","\t\t\t\t\t","\t\t\t\t\t\t}\t// Tipo Inferido ou cast não necessário","\t\t\t\t\t\telse{","\t\t\t\t\t\t\tif (getVarType($4.tipo) == \"char*\"){","\t\t\t\t\t\t\t\tcout << \"Este Operador += não é destinado a Strings\" << endl;","\t\t\t\t\t\t\t}","\t\t\t\t\t\t\telse{","\t\t\t\t\t\t\t\tstring linha = \"\\t\" + var.nome_temp + \" = \" + var.nome_temp + \" + \" + $4.label +\";\\n\";","\t\t\t\t\t\t\t\t$$.traducao = $4.traducao+ \"\\n\" + linha;","\t\t\t\t\t\t\t}","\t\t\t\t\t\t\t\t","\t\t\t\t\t\t\t","\t\t\t\t\t\t}","\t\t\t","\t\t\t\t\t","\t\t\t\t\t}","\t\t\t\t\t| TK_ID '-' '=' E ","\t\t\t\t\t{","\t\t\t\t\t\tvariavel var = getVarOnStack($1.label);","\t\t\t\t\t\tif(var.tipo != getVarType(TK_TIPO_INT) && var.tipo != getVarType(TK_TIPO_FLOAT)){","\t\t\t\t\t\t\tcout << \"operador -= não é permitido para o tipo \" << var.tipo << endl;","\t\t\t\t\t\t\texit(0);","\t\t\t\t\t\t}","\t\t\t\t\t\t","\t\t\t\t\t\t//caminho feliz","\t\t\t\t\t\t//string linha = $1.label + \" = \" + $1.label + \" + \" + $3.label; ","","\t\t\t\t\t\t","\t\t\t\t\t\t// Cast na atribuição com Temp \"Store\"","\t\t\t\t\t\tif( var.tipo != getVarType($4.tipo) ) {","\t\t\t\t\t\t\t// std::cout << \"Convert Tipo da \" << $1.label << \"    Tipo: \" << varTable[$1.label].tipo  << std::endl;","\t\t\t\t\t\t\t","\t\t\t\t\t\t\t//string varName;","\t\t\t\t\t\t\tstring store = getVarName();","\t\t\t\t\t\t\tstring linha =  store + \" = (\" +var.tipo+\") \" + $4.label + \";\\n\";","\t\t\t\t\t\t\tstring linha2 = \"\\t\"  + var.nome_temp + \" = \" + store + \";\\n\";","\t\t\t\t\t\t\t","\t\t\t\t\t\t\t$$.traducao = $1.traducao + $4.traducao + \"\\t\"  + linha + linha2;","\t\t","\t\t\t\t\t\t\tvariavel v = createVar(store, getVarOnStack($1.label).tipo,store);","\t\t","\t\t\t\t\t\t\taddVar2Escopo(pilha, v);","\t\t\t\t\t\t\tdeclaracoes.push_back(v);","\t\t\t\t\t","\t\t\t\t\t\t}\t// Tipo Inferido ou cast não necessário","\t\t\t\t\t\telse{","\t\t\t\t\t\t\tif (getVarType($4.tipo) == \"char*\"){","\t\t\t\t\t\t\t\tcout << \"Este Operador -= não é destinado a Strings\" << endl;","\t\t\t\t\t\t\t}","\t\t\t\t\t\t\telse{","\t\t\t\t\t\t\t\tstring linha = \"\\t\" + var.nome_temp + \" = \" + var.nome_temp + \" - \" + $4.label +\";\\n\";","\t\t\t\t\t\t\t\t$$.traducao = $4.traducao+ \"\\n\" + linha;","\t\t\t\t\t\t\t}","\t\t\t\t\t\t\t\t","\t\t\t\t\t\t\t","\t\t\t\t\t\t}","\t\t\t\t\t}","\t\t\t\t\t| TK_ID '*' '=' E ","\t\t\t\t\t{","\t\t\t\t\t\tvariavel var = getVarOnStack($1.label);","\t\t\t\t\t\tif(var.tipo != getVarType(TK_TIPO_INT) && var.tipo != getVarType(TK_TIPO_FLOAT)){","\t\t\t\t\t\t\tcout << \"operador *= não é permitido para o tipo \" << var.tipo << endl;","\t\t\t\t\t\t\texit(0);","\t\t\t\t\t\t}","\t\t\t\t\t\t","\t\t\t\t\t\t//caminho feliz","\t\t\t\t\t\t//string linha = $1.label + \" = \" + $1.label + \" + \" + $3.label; ","","\t\t\t\t\t\t","\t\t\t\t\t\t// Cast na atribuição com Temp \"Store\"","\t\t\t\t\t\tif( var.tipo != getVarType($4.tipo) ) {","\t\t\t\t\t\t\t// std::cout << \"Convert Tipo da \" << $1.label << \"    Tipo: \" << varTable[$1.label].tipo  << std::endl;","\t\t\t\t\t\t\t","\t\t\t\t\t\t\t//string varName;","\t\t\t\t\t\t\tstring store = getVarName();","\t\t\t\t\t\t\tstring linha =  store + \" = (\" +var.tipo+\") \" + $4.label + \";\\n\";","\t\t\t\t\t\t\tstring linha2 = \"\\t\"  + var.nome_temp + \" = \" + store + \";\\n\";","\t\t\t\t\t\t\t","\t\t\t\t\t\t\t$$.traducao = $1.traducao + $4.traducao + \"\\t\"  + linha + linha2;","\t\t","\t\t\t\t\t\t\tvariavel v = createVar(store, getVarOnStack($1.label).tipo,store);","\t\t","\t\t\t\t\t\t\taddVar2Escopo(pilha, v);","\t\t\t\t\t\t\tdeclaracoes.push_back(v);","\t\t\t\t\t","\t\t\t\t\t\t}\t// Tipo Inferido ou cast não necessário","\t\t\t\t\t\telse{","\t\t\t\t\t\t\tif (getVarType($4.tipo) == \"char*\"){","\t\t\t\t\t\t\t\tcout << \"Este Operador *= não é destinado a Strings\" << endl;","\t\t\t\t\t\t\t}","\t\t\t\t\t\t\telse{","\t\t\t\t\t\t\t\tstring linha = \"\\t\" + var.nome_temp + \" = \" + var.nome_temp + \" * \" + $4.label +\";\\n\";","\t\t\t\t\t\t\t\t$$.traducao = $4.traducao+ \"\\n\" + linha;","\t\t\t\t\t\t\t}","\t\t\t\t\t\t\t\t","\t\t\t\t\t\t","\t\t\t\t\t\t}","\t\t\t\t","\t\t\t\t\t}","\t\t\t\t\t| TK_ID '/' '=' E ","\t\t\t\t\t{","\t\t\t\t\t\tvariavel var = getVarOnStack($1.label);","\t\t\t\t\t\tif(var.tipo != getVarType(TK_TIPO_INT) && var.tipo != getVarType(TK_TIPO_FLOAT)){","\t\t\t\t\t\t\tcout << \"operador /= não é permitido para o tipo \" << var.tipo << endl;","\t\t\t\t\t\t\texit(0);","\t\t\t\t\t\t}","\t\t\t\t\t\t","\t\t\t\t\t\t//caminho feliz","\t\t\t\t\t\t//string linha = $1.label + \" = \" + $1.label + \" + \" + $3.label; ","","\t\t\t\t\t\t","\t\t\t\t\t\t// Cast na atribuição com Temp \"Store\"","\t\t\t\t\t\tif( var.tipo != getVarType($4.tipo) ) {","\t\t\t\t\t\t\t// std::cout << \"Convert Tipo da \" << $1.label << \"    Tipo: \" << varTable[$1.label].tipo  << std::endl;","\t\t\t\t\t\t\t","\t\t\t\t\t\t\t//string varName;","\t\t\t\t\t\t\tstring store = getVarName();","\t\t\t\t\t\t\tstring linha =  store + \" = (\" +var.tipo+\") \" + $4.label + \";\\n\";","\t\t\t\t\t\t\tstring linha2 = \"\\t\"  + var.nome_temp + \" = \" + store + \";\\n\";","\t\t\t\t\t\t\t","\t\t\t\t\t\t\t$$.traducao = $1.traducao + $4.traducao + \"\\t\"  + linha + linha2;","\t\t","\t\t\t\t\t\t\tvariavel v = createVar(store, getVarOnStack($1.label).tipo,store);","\t\t","\t\t\t\t\t\t\taddVar2Escopo(pilha, v);","\t\t\t\t\t\t\tdeclaracoes.push_back(v);","\t\t\t\t\t","\t\t\t\t\t\t}\t// Tipo Inferido ou cast não necessário","\t\t\t\t\t\telse{","\t\t\t\t\t\t\tif (getVarType($4.tipo) == \"char*\"){","\t\t\t\t\t\t\t\tcout << \"Este Operador /= não é destinado a Strings\" << endl;","\t\t\t\t\t\t\t}","\t\t\t\t\t\t\telse{","\t\t\t\t\t\t\t\tstring linha = \"\\t\" + var.nome_temp + \" = \" + var.nome_temp + \" / \" + $4.label +\";\\n\";","\t\t\t\t\t\t\t\t$$.traducao = $4.traducao+ \"\\n\" + linha;","\t\t\t\t\t\t\t}","\t\t\t\t\t\t\t\t","\t\t\t\t\t\t","\t\t\t\t\t\t}","\t\t\t\t","\t\t\t\t\t}","\t\t\t\t","\t\t\t\t\t;","\t\t\t","OPERADOR_UNARIO:\tTK_ID TK_PP ","\t\t\t\t\t{","\t\t\t\t\t\t","\t\t\t\t\t\tvariavel var = getVarOnStack($1.label);","\t\t\t\t\t\tif(var.tipo != getVarType(TK_TIPO_INT)){","\t\t\t\t\t\t\tcout << \"operador ++ não é permitido para o tipo \" << var.tipo << endl;","\t\t\t\t\t\t\texit(0);","\t\t\t\t\t\t}","\t\t\t\t\t\t","\t\t\t\t\t\tstring varName = getVarName();","\t\t\t\t\t\tvariavel v = createVar(varName, var.tipo, varName);","\t\t\t\t\t\t","\t\t\t\t\t\t//a = 4;","\t\t\t\t\t\t// print(a++); printa 4","\t\t\t\t\t\t// print(++a) printa 5","\t\t\t\t\t\t","\t\t\t\t\t\taddVar2Escopo(pilha, v);","\t\t\t\t\t\tdeclaracoes.push_back(v);","\t\t\t\t\t\t","\t\t\t\t\t\tstring linha = \"\\t\" + varName + \" =  1;\\n\";","\t\t\t\t\t\tstring linha2 = \"\\t\" + var.nome_temp + \" = \"+ varName +\" + \" + var.nome_temp + \";\\n\";","\t\t\t\t\t\t","\t\t\t\t\t\t$$.traducao = linha + linha2;","","\t","\t\t\t\t\t}","\t\t\t\t\t| TK_PP TK_ID ","\t\t\t\t\t{","\t\t\t\t\t\t","\t\t\t\t\t\tvariavel var = getVarOnStack($1.label);","\t\t\t\t\t\tif(var.tipo != getVarType(TK_TIPO_INT)){","\t\t\t\t\t\t\tcout << \"operador ++ não é permitido para o tipo \" << var.tipo << endl;","\t\t\t\t\t\t\texit(0);","\t\t\t\t\t\t}","\t\t\t\t\t\t","\t\t\t\t\t\t//string varName = getVarName();","\t\t\t\t\t//\tvariavel v = createVar(varName, var.tipo, varName);","\t\t\t\t\t\t","\t\t\t\t\t\t//a = 4;","\t\t\t\t\t\t// print(a++); printa 4","\t\t\t\t\t\t// print(++a) printa 5","\t\t\t\t\t\t","\t\t\t\t\t\taddVar2Escopo(pilha, var);","\t\t\t\t\t\tdeclaracoes.push_back(var);","\t\t\t\t\t\t","\t\t\t\t\t\t//string linha = \"\\t\" + varName + \" =  1;\\n\";","\t\t\t\t\t\tstring linha2 = \"\\t\" + var.nome_temp + \" = \" + var.nome_temp + \" + \"+ \"1\" + \";\\n\";","\t\t\t\t\t\t","\t\t\t\t\t\t$$.traducao = linha2;","\t\t\t\t\t}","\t\t\t\t\t| TK_ID TK_MM","\t\t\t\t\t{","\t\t\t\t\t\t","\t\t\t\t\t\tvariavel var = getVarOnStack($1.label);","\t\t\t\t\t\tif(var.tipo != getVarType(TK_TIPO_INT)){","\t\t\t\t\t\t\tcout << \"operador -- não é permitido para o tipo \" << var.tipo << endl;","\t\t\t\t\t\t\texit(0);","\t\t\t\t\t\t}","\t\t\t\t\t\t","\t\t\t\t\t\tstring varName = getVarName();","\t\t\t\t\t\tvariavel v = createVar(varName, var.tipo, varName);","\t\t\t\t\t\t","\t\t\t\t\t\t//a = 4;","\t\t\t\t\t\t// print(a++); printa 4","\t\t\t\t\t\t// print(++a) printa 5","\t\t\t\t\t\t","\t\t\t\t\t\taddVar2Escopo(pilha, v);","\t\t\t\t\t\tdeclaracoes.push_back(v);","\t\t\t\t\t\t","\t\t\t\t\t\tstring linha = \"\\t\" + varName + \" =  1;\\n\";","\t\t\t\t\t\tstring linha2 = \"\\t\" + var.nome_temp + \" = \" + var.nome_temp + \" - \" + varName + \";\\n\";","\t\t\t\t\t\t","\t\t\t\t\t\t$$.traducao = linha + linha2;","","\t","\t\t\t\t\t}","\t\t\t\t\t| TK_MM TK_ID","\t\t\t\t\t{","\t\t\t\t\t\t","\t\t\t\t\t\tvariavel var = getVarOnStack($1.label);","\t\t\t\t\t\tif(var.tipo != getVarType(TK_TIPO_INT)){","\t\t\t\t\t\t\tcout << \"operador ++ não é permitido para o tipo \" << var.tipo << endl;","\t\t\t\t\t\t\texit(0);","\t\t\t\t\t\t}","\t\t\t\t\t\t","\t\t\t\t\t\t//string varName = getVarName();","\t\t\t\t\t//\tvariavel v = createVar(varName, var.tipo, varName);","\t\t\t\t\t\t","\t\t\t\t\t\t//a = 4;","\t\t\t\t\t\t// print(a++); printa 4","\t\t\t\t\t\t// print(++a) printa 5","\t\t\t\t\t\t","\t\t\t\t\t\taddVar2Escopo(pilha, var);","\t\t\t\t\t\tdeclaracoes.push_back(var);","\t\t\t\t\t\t","\t\t\t\t\t\t//string linha = \"\\t\" + varName + \" =  1;\\n\";","\t\t\t\t\t\tstring linha2 = \"\\t\" + var.nome_temp + \" = \" + var.nome_temp + \" - \" + \"1\" + \";\\n\";","\t\t\t\t\t\t","\t\t\t\t\t\t$$.traducao = linha2;","\t\t\t\t\t}","\t\t\t\t\t;","\t\t\t","GLOBAL: \tTK_GLOBAL TYPE TK_ID {","\t\t\t","","\t\t\t\t//se variavel NAO existe no escopo global","\t\t\t\tif ( pilha->escopos[0][$3.label].nome_var == \"\"  ){","\t\t\t\t\t","\t\t\t\t\tstring varName = getVarName();","\t\t\t\t\tvariavel v = createVar($3.label, getVarType($2.tipo), varName);","\t\t\t\t\t","\t\t\t\t\taddVar2Global(pilha, v);","\t\t\t\t\tdeclaracoes.push_back(v);","","\t\t\t\t}else{","\t\t\t\t\tcout << \"Variavel \" << $3.label << \" ja foi declarada no escopo global\" <<endl;","\t\t\t\t\texit(0);","\t\t\t\t}","\t","\t\t\t}","\t\t\t|","\t\t\tTK_GLOBAL TYPE TK_ID '=' E{","\t\t\t","\t\t\t\t//std::map<string,variavel>::iterator it;","\t\t\t","\t\t\t\t//busca no escopo global se variavel ja existe","\t\t\t\t//it = pilha->escopos[0].find($3.label);","\t\t\t\t","\t\t\t\t//se variavel nao existe no escopo global","\t\t\t\tif ( pilha->escopos[0][$3.label].nome_var == \"\"  ){","\t\t\t\t\t","\t\t\t\t\tstring varName = getVarName();","\t\t\t\t\tvariavel v = createVar($3.label, getVarType($2.tipo), varName);","\t\t\t\t\t","\t\t\t\t\taddVar2Global(pilha, v);","\t\t\t\t\tdeclaracoes.push_back(v);","\t\t\t\t\t","\t\t\t\t\t\t\t\t\t// Cast na atribuição com Temp \"Store\"","\t\t\t\t\tif( v.tipo != getVarType($5.tipo) ) {","\t\t\t\t\t\t// std::cout << \"Convert Tipo da \" << $1.label << \"    Tipo: \" << varTable[$1.label].tipo  << std::endl;","\t\t\t\t\t\tstring store = getVarName();","\t\t\t\t\t\tstring linha =  store + \" = (\" +v.tipo+\") \" + $5.label + \";\\n\";","\t\t\t\t\t\tstring linha2 = \"\\t\"  + varName + \" = \" + store + \";\\n\";","\t\t\t\t\t\t","\t\t\t\t\t\t$$.traducao = $3.traducao + $5.traducao + \"\\t\"  + linha + linha2;","\t","\t\t\t\t\t\tvariavel v = createVar(store, getVarOnStack($3.label).tipo,store);","\t","\t\t\t\t\t\taddVar2Escopo(pilha, v);","\t\t\t\t\t\tdeclaracoes.push_back(v);","\t\t\t\t","\t\t\t\t\t}\t// Tipo Inferido ou cast não necessário","\t\t\t\t\telse{","\t\t\t\t\t\tif (getVarType($5.tipo) == \"char*\"){","\t\t\t\t\t\t\t$$.traducao = $3.traducao + $5.traducao + \"\\tstrcpy(\" + varName  + \", \" + $5.label +\");\\n\";","\t\t\t\t\t\t}","\t\t\t\t\t\telse","\t\t\t\t\t\t\t$$.traducao = $3.traducao + $5.traducao + \"\\t\" + varName  + \" = \" + $5.label +\";\\n\";","\t\t\t\t\t\t","\t\t\t\t\t}","\t\t\t\t","\t\t\t\t}\t","\t\t\t\t//daqui","\t\t\t}","\t\t\t;","\t\t\t","LOOP:\t\tWHILE","\t\t\t{ ","\t\t\t\t$$ = $1;","\t\t\t//\tcout<< \"traducao de while\" << $1.traducao << endl;","\t\t\t\t","\t\t\t}","\t\t\t| DO","\t\t\t{","\t\t\t\t$$ = $1;","\t\t\t}","\t\t\t| FOR","\t\t\t{","\t\t\t\t$$ = $1;","\t\t\t}","\t\t\t;","","WHILE : \tTK_WHILE '(' E ')' BLOCO","\t\t\t{","\t\t\t\tint teste = checkType($3.tipo, $3.tipo);","\t","\t\t\t\tif (teste != TK_TIPO_BOOL && teste != TK_TIPO_INT){","\t\t\t\t\tputs(\"Invalid Type for the WHILE Statment\");","\t\t\t\t\texit(0);","\t\t\t\t}","\t\t\t\tstring varName = getVarName();","\t\t\t\t","\t\t\t\tLoop loop = getLoop(pilhaLoops);","\t\t\t\t","\t\t\t\t//string beginLabel = \"inicio\" + getLabel(TK_WHILE);","\t\t\t\tstring beginLabel = loop.beginLabel;","\t\t\t\t//curLabel--; //Gambiarra para ficar inicio_while_1 e fim_while_1","\t","\t\t\t\t// string endLabel = \"fim\" + getLabel(TK_WHILE);","\t\t\t\tstring endLabel = loop.endLabel;","\t\t\t\tstring continueLabel = loop.continueLabel;","\t","\t\t\t\tstring linha = \"\\t\" + varName + \" = !\" + $3.label + \";\\n\";","\t\t\t\tstring showLabel = \"\\tgoto \"+ beginLabel + \";\\n\\n\";","\t","\t\t\t\tvariavel v = createVar(varName, getVarType(teste), varName);","\t\t\t\taddVar2Escopo(pilha, v);","\t\t\t\tdeclaracoes.push_back(v);","\t\t\t\t","\t\t\t\t// parte que atualiza o indice do loop == $3.traducao + linha","\t\t\t\t// o continueLabel esta para ser usado por um comando continue, caso nao haja um","\t\t\t\t// ele é apenas um label vazio","\t\t\t\tstring stmt =  \"\\t\" + beginLabel +\":\"+ \"\\tif(\" + varName + \") \" + \"goto \" + endLabel +\";\\n\" + $5.traducao + \"\\n\" + \"\\t\" + ","\t\t\t\tcontinueLabel + \"://continueLabel\\n\" + $3.traducao + linha + showLabel + \"\\t\"  + endLabel + \":\\n\\n\";","\t\t\t    $$.traducao = $3.traducao + linha + stmt;","\t\t\t\t","\t\t\t}","\t\t\t;","DO\t\t\t: TK_DO BLOCO TK_WHILE '(' E ')' ';'","\t\t\t{","\t\t\t\tint teste = checkType($5.tipo, $5.tipo);","\t","\t\t\t\tif (teste != TK_TIPO_BOOL && teste != TK_TIPO_INT){","\t\t\t\t\tputs(\"Invalid Type for the DO...WHILE Statment\");","\t\t\t\t\texit(0);","\t\t\t\t}","\t\t\t\t","\t\t\t\t//string varName = getVarName();","\t\t\t\t","\t\t\t\tLoop loop = getLoop(pilhaLoops);","\t\t\t\t","\t\t\t\tstring beginLabel = loop.beginLabel;","\t\t\t\tstring endLabel = loop.endLabel;","\t\t\t\tstring continueLabel = loop.continueLabel;","\t","\t\t\t\tstring linha = \"\\tif(\" + $5.label + \")\";","\t\t\t\tstring showLabel = \"\\tgoto \"+ beginLabel;","\t\t\t\t","\t\t\t\t//label do_while bloco","\t\t\t\tstring stmt  = \"\\t\" + beginLabel + \":\\n\" + $2.traducao + \"\\n\\t\" + continueLabel + \":\\n\";","\t\t\t\tstmt\t\t+= $5.traducao + linha + showLabel + \";\\n\\t\" + endLabel + \":\\n\"; ","\t\t\t\t","\t\t\t\t$$.traducao = stmt;","\t\t\t}","\t\t\t;","\t\t\t","FOR:\t\tTK_FOR '(' DECLARATION ';' E ';' ATRIB ')' BLOCO","\t\t\t{","\t\t\t\tcout << \"ENCONTREI UM FOR \" << getVarType($5.tipo) <<\" : \" << $5.tipo <<endl;","\t\t\t\t","\t\t\t\tif( $5.tipo != TK_TIPO_BOOL ){","\t\t\t\t\tcout <<  \"ERRO DE COMPILACAO: for espera uma expressao boleana no segundo parametro\" <<endl;","\t\t\t\t\texit(0);","\t\t\t\t}","\t\t\t\t","\t\t\t\tstring varName = getVarName();","\t\t\t\t","\t\t\t\tvariavel v = createVar(varName, getVarType($5.tipo), varName);","\t\t\t\taddVar2Escopo(pilha, v);","\t\t\t\tdeclaracoes.push_back(v);","\t\t\t\t\t","\t\t\t\t\t","\t\t\t\tLoop loop = getLoop(pilhaLoops);","\t\t\t\t","\t\t\t\tstring beginLabel = loop.beginLabel;","\t\t\t\tstring endLabel = loop.endLabel;","\t\t\t\tstring continueLabel = loop.continueLabel;","\t\t\t\t","\t\t\t\tstring linha = \"\\t\" + varName + \" = !\" + $5.label + \";\\n\";","\t\t\t\t","\t\t\t\tstring atrib_inicial = $3.traducao;","\t\t\t\tstring showLabel = \"\\n\\t\" + beginLabel + \": \\n\" + $5.traducao + linha + \"\\n\";","\t\t\t\tstring verifica = \"\\tif(\" + varName + \") \" + \"\\tgoto \"+ endLabel + \";\\n\";","\t\t\t\t","\t\t\t\tstring dentroFor = $9.traducao + \"\\n\\t\" + continueLabel + \": \\n\" + $7.traducao + $5.traducao + linha + \"\\n\";","\t\t\t\t","\t\t\t\t$$.traducao = atrib_inicial + showLabel + verifica + dentroFor + \"\\tgoto \" + beginLabel + \";\\n\\t\" + endLabel + \":\\n\";","\t\t\t}","\t\t\t|","\t\t\tTK_FOR '(' DECLARATION ';' E ';' OPERADOR_UNARIO ')' BLOCO","\t\t\t{","\t\t\t\tcout << \"ENCONTREI UM FOR \" << getVarType($5.tipo) <<\" : \" << $5.tipo <<endl;","\t\t\t\t","\t\t\t\tif( $5.tipo != TK_TIPO_BOOL ){","\t\t\t\t\tcout <<  \"ERRO DE COMPILACAO: for espera uma expressao boleana no segundo parametro\" <<endl;","\t\t\t\t\texit(0);","\t\t\t\t}","\t\t\t\t","\t\t\t\tstring varName = getVarName();","\t\t\t\t","\t\t\t\tvariavel v = createVar(varName, getVarType($5.tipo), varName);","\t\t\t\taddVar2Escopo(pilha, v);","\t\t\t\tdeclaracoes.push_back(v);","\t\t\t\t\t","\t\t\t\t\t","\t\t\t\tLoop loop = getLoop(pilhaLoops);","\t\t\t\t","\t\t\t\tstring beginLabel = loop.beginLabel;","\t\t\t\tstring endLabel = loop.endLabel;","\t\t\t\tstring continueLabel = loop.continueLabel;","\t\t\t\t","\t\t\t\tstring linha = \"\\t\" + varName + \" = !\" + $5.label + \";\\n\";","\t\t\t\t","\t\t\t\tstring atrib_inicial = $3.traducao;","\t\t\t\tstring showLabel = \"\\n\\t\" + beginLabel + \": \\n\" + $5.traducao + linha + \"\\n\";","\t\t\t\tstring verifica = \"\\tif(\" + varName + \") \" + \"\\tgoto \"+ endLabel + \";\\n\";","\t\t\t\t","\t\t\t\tstring dentroFor = $9.traducao + \"\\n\\t\" + continueLabel + \": \\n\" + $7.traducao + $5.traducao + linha + \"\\n\";","\t\t\t\t","\t\t\t\t$$.traducao = atrib_inicial + showLabel + verifica + dentroFor + \"\\tgoto \" + beginLabel + \";\\n\\t\" + endLabel + \":\\n\";","\t\t\t}","\t\t\t|\t\t\t","\t\t\tTK_FOR '(' DECLARATION ';' E ';' OPERADOR_COMPOSTO ')' BLOCO","\t\t\t{","\t\t\t\tcout << \"ENCONTREI UM FOR \" << getVarType($5.tipo) <<\" : \" << $5.tipo <<endl;","\t\t\t\t","\t\t\t\tif( $5.tipo != TK_TIPO_BOOL ){","\t\t\t\t\tcout <<  \"ERRO DE COMPILACAO: for espera uma expressao boleana no segundo parametro\" <<endl;","\t\t\t\t\texit(0);","\t\t\t\t}","\t\t\t\t","\t\t\t\tstring varName = getVarName();","\t\t\t\t","\t\t\t\tvariavel v = createVar(varName, getVarType($5.tipo), varName);","\t\t\t\taddVar2Escopo(pilha, v);","\t\t\t\tdeclaracoes.push_back(v);","\t\t\t\t\t","\t\t\t\t\t","\t\t\t\tLoop loop = getLoop(pilhaLoops);","\t\t\t\t","\t\t\t\tstring beginLabel = loop.beginLabel;","\t\t\t\tstring endLabel = loop.endLabel;","\t\t\t\tstring continueLabel = loop.continueLabel;","\t\t\t\t","\t\t\t\tstring linha = \"\\t\" + varName + \" = !\" + $5.label + \";\\n\";","\t\t\t\t","\t\t\t\tstring atrib_inicial = $3.traducao;","\t\t\t\tstring showLabel = \"\\n\\t\" + beginLabel + \": \\n\" + $5.traducao + linha + \"\\n\";","\t\t\t\tstring verifica = \"\\tif(\" + varName + \") \" + \"\\tgoto \"+ endLabel + \";\\n\";","\t\t\t\t","\t\t\t\tstring dentroFor = $9.traducao + \"\\n\\t\" + continueLabel + \": \\n\" + $7.traducao + $5.traducao + linha + \"\\n\";","\t\t\t\t","\t\t\t\t$$.traducao = atrib_inicial + showLabel + verifica + dentroFor + \"\\tgoto \" + beginLabel + \";\\n\\t\" + endLabel + \":\\n\";","\t\t\t}","\t\t\t","\t\t\t;","\t\t\t","PUSH_LOOP: {","\t\t\t\tstring label = getLabel(TK_WHILE);","\t\t\t\t","\t\t\t\t//cout << \"Pushando o Loop While\" << endl;","\t\t\t\t//string label = \"loop_1\";","\t\t\t\tstring beginLabel = \"inicio\" + label;","\t\t\t\tstring endLabel = \"fim\" + label;","\t\t\t\tstring continueLabel = \"continue\" + label;","\t\t\t\t","\t\t\t\tLoop loop;","\t\t\t\tloop.endLabel = endLabel;","\t\t\t\tloop.beginLabel = beginLabel;","\t\t\t\tloop.continueLabel = continueLabel;","\t\t\t\t","\t\t\t\t","\t\t\t\tpushLoop(loop, pilhaLoops);","\t\t\t\t","\t\t\t\t$$.traducao = \"\";","\t\t\t\t$$.label = \"\";","\t\t\t}","\t\t\t","POP_LOOP:\t{","\t\t\t\tpopLoop(pilhaLoops);","\t\t\t\t","\t\t\t\tcout << \"Popando o Loop While\" << endl;","","\t\t\t\t","\t\t\t\t$$.traducao = \"\";","\t\t\t\t$$.label = \"\";","\t\t\t};","","PRINT : \t\tTK_PRINT TK_PRINT_ARGS","\t\t\t\t{","\t\t\t\t    //variavel v = getVarOnStack($2.label);","\t\t\t\t    ","\t\t\t\t\t$$.traducao = gambiarra_print + \"\\tstd::cout \"  + $2.traducao + \" << std::endl;\\n\";","\t\t\t\t\t","\t\t\t\t//\tcout << \"traducao de print args = \" <<  $2.traducao<<endl;","\t\t\t\t//\tcout  << \"traducao de print = \" <<  $$.traducao<<endl;","\t\t\t\t}","\t\t\t\t;","\t\t","TK_PRINT_ARGS:\tTK_PRINT_ARGS ',' TK_PRINT_ARG","\t\t\t\t{","\t\t\t\t\t$$.traducao = $1.traducao + $3.traducao;","\t\t\t\t\t","\t\t\t\t\t//cout << \"derivacao print args\" << $$.traducao << endl;","\t\t\t\t}","\t\t\t\t| TK_PRINT_ARG","\t\t\t\t{","\t\t\t\t\t$$.traducao = $1.traducao; ","\t\t\t\t};","\t\t\t\t","TK_PRINT_ARG:\tE","\t\t\t\t{","\t\t\t\t\tgambiarra_print = $1.traducao;","\t\t\t\t\t$$.traducao = \" << \" + $1.label;","\t\t\t\t//\tcout << \"traducao de print arg = \" <<  $$.traducao <<endl;","\t\t\t\t//\tcout << \"gambiarra_print  = \" <<  $1.traducao <<endl;","\t\t\t\t\t","\t\t\t\t};","","","READ:\t\t\tTK_READ TK_READ_ARGS","\t\t\t\t{","","\t\t\t\t\t$$.traducao = gambiarra_print + \"\\tstd::cin\"  + $2.traducao + \";\\n\";","","\t\t\t\t}","TK_READ_ARGS:\tTK_READ_ARGS ',' TK_READ_ARG","\t\t\t\t{","\t\t\t\t\t$$.traducao = $1.traducao + $3.traducao;","\t\t\t\t\t","\t\t\t\t\t//cout << \"derivacao print args\" << $$.traducao << endl;","\t\t\t\t}","\t\t\t\t| TK_READ_ARG","\t\t\t\t{","\t\t\t\t\t$$.traducao = $1.traducao; ","\t\t\t\t};","\t\t\t\t","TK_READ_ARG:\tE","\t\t\t\t{","\t\t\t\t\tgambiarra_read = $1.traducao;","\t\t\t\t\t$$.traducao = \" >> \" + $1.label;","\t\t\t\t//\tcout << \"traducao de print arg = \" <<  $$.traducao <<endl;","\t\t\t\t//\tcout << \"gambiarra_print  = \" <<  $1.traducao <<endl;","\t\t\t\t\t","\t\t\t\t};","DECLARATION : TYPE VARLIST","\t\t\t{","\t\t\t\t$2.tipo = $1.tipo;","\t\t\t\t$$.traducao = $1.traducao + $2.traducao;","\t\t\t\t// $$.tipo = ;","\t\t\t}","\t\t\t;","","TYPE\t\t: TK_TIPO_INT","\t\t\t{","\t\t\t\t$$.tipo = TK_TIPO_INT;","\t\t\t\t$$.traducao = $1.traducao;","\t\t\t}","\t\t\t| TK_TIPO_FLOAT","\t\t\t{","\t\t\t\t$$.tipo = TK_TIPO_FLOAT;","\t\t\t\t$$.traducao = $1.traducao;","\t\t\t}","\t\t\t| TK_TIPO_CHAR","\t\t\t{","\t\t\t\t$$.tipo = TK_TIPO_CHAR;","\t\t\t\t$$.traducao = $1.traducao;","\t\t\t}","\t\t\t| TK_TIPO_BOOL","\t\t\t{","\t\t\t\t$$.tipo = TK_TIPO_BOOL;","\t\t\t\t$$.traducao = $1.traducao;","\t\t\t}","\t\t\t|","\t\t\tTK_TIPO_STRING","\t\t\t{","\t\t\t\t$$.tipo = TK_TIPO_STRING;","\t\t\t\t$$.traducao = $1.traducao;","\t\t\t}","\t\t\t;","","VARLIST\t\t: VARLIST ',' TK_ID","\t\t\t{","\t\t\t\tstring varName = getVarName();","\t\t\t\t$$.traducao = $1.traducao + $3.traducao;// +\"\\t\" + getVarType($0.tipo) + \" \"+ varName + \"; \\n\";","\t\t\t\tcreateLog(\"Name\", getVarType($0.tipo) + \" \" + $3.label + \" - \" + varName, appendLogFile);","\t\t\t\tvariavel v = createVar($3.label, getVarType($0.tipo), varName);","\t\t\t\taddVar2Escopo(pilha, v);","\t\t\t\tdeclaracoes.push_back(v);","\t\t\t}","\t\t\t| VARLIST ',' ATRIB","\t\t\t{","\t\t\t\t$$.traducao = $1.traducao + $3.traducao;","\t\t\t\t$1.tipo = $0.tipo;","\t\t\t\t$3.tipo = $0.tipo;","\t\t\t\t// cout << \"Em \" <<$1.label <<\" Tipo do VARLIST em Var, Atrib: \" << getVarType($0.tipo) << \"\\nEm \"<< $3.label<< \" Tipo da Atrib em Var, Atrib: \" << getVarType($3.tipo) << endl;","\t\t\t}","\t\t\t| TK_ID '=' E","\t\t\t{","\t\t\t\tvariavel var = getVarOnStack($1.label); //Buscar só no escopo atual","\t\t\t\tstring varName = \"\";","\t\t\t\t$1.tamanho = $3.tamanho;","","\t\t\t\tstring infere_tipo = \"\", store = \"\";","\t\t\t\t//variavel v;","","\t\t\t\t//std::cout << \"TK_ID = E\" << endl;","","\t\t\t\t//variavel n existe na tabela","\t\t\t\tif(varName == \"\"){","\t\t\t\t\tvarName = getVarName();","\t\t\t\t\t// cout << \"ENTREI NO IF \" <<getVarType($0.tipo) << endl;","","\t\t\t\t\tif(getVarType($0.tipo) != \"\"){","\t\t\t\t\t//\tcout << \"$0 tipo nao vazio\" << endl;","\t\t\t\t\t\tinfere_tipo = getVarType($0.tipo);","\t\t\t\t\t\t","\t\t\t\t\t}","\t\t\t\t\telse{","\t\t\t\t\t//\tcout << \"$0 tipo vazio\" << endl;","\t\t\t\t\t\tinfere_tipo = getVarType($3.tipo);","\t\t\t\t\t\t","\t\t\t\t\t}","","\t\t\t\t\tvar = createVar($1.label, infere_tipo, varName);","","\t\t\t\t\t// std::cout << \"Tipo \" << getVarType($0.tipo) << \" com i = \"<< i<< std::endl;","\t\t\t\t\t// std::cout << \"(VAR3) Tipo \" << getVarType($3.tipo) << \" com i = \"<< i<< std::endl;","","\t\t\t\t\taddVar2Escopo(pilha, var);","\t\t\t\t\tdeclaracoes.push_back(var);","","\t\t\t\t\t","\t\t\t\t}","\t\t\t\t","\t\t\t\t// Cast na atribuição com Temp \"Store\"","\t\t\t\tif( (getVarOnStack($1.label).tipo != getVarType($3.tipo) ) ){","\t\t\t\t\t// std::cout << \"Convert Tipo da \" << $1.label << \"    Tipo: \" << varTable[$1.label].tipo  << std::endl;","\t\t\t\t\tstore = getVarName();","\t\t\t\t\tstring linha =  store + \" = (\" +getVarOnStack($1.label).tipo+\") \" + $3.label + \";\\n\";","\t\t\t\t\tstring linha2 = \"\\t\"  + varName + \" = \" + store + \";\\n\";","\t\t\t\t\t$$.traducao = $1.traducao + $3.traducao + \"\\t\"  + linha + linha2;","","\t\t\t\t\tvariavel v = createVar(store, getVarOnStack($1.label).tipo,store);","","\t\t\t\t\taddVar2Escopo(pilha, v);","\t\t\t\t\tdeclaracoes.push_back(v);","\t\t\t\t}","\t\t\t\t// Tipo Inferido ou cast não necessário","\t\t\t\telse{","\t\t\t\t\tif (getVarType($3.tipo) == \"char*\"){","\t\t\t\t\t\t$$.traducao = $1.traducao + $3.traducao + \"\\tstrcpy(\" + varName  + \", \" + $3.label +\");\\n\";","\t\t\t\t\t}","\t\t\t\t\telse","\t\t\t\t\t\t$$.traducao = $1.traducao + $3.traducao + \"\\t\" + varName  + \" = \" + $3.label +\";\\n\";","\t\t\t\t\t","\t\t\t\t\t","\t\t\t\t}","\t\t\t\t","\t\t\t\ti++;","\t\t\t\tcreateLog(\"Name\", getVarType($3.tipo) + \" \"+ $$.label + \" - \" + varName, appendLogFile);","\t\t\t","\t\t\t}","\t\t\t|TK_ID","\t\t\t{","\t\t\t\t// COLOCAR no HASH","\t\t\t\tstring varName = getVarName();","\t\t\t\t$$.label = $1.label;","\t\t\t\t//$$.tamanho = 20;","\t\t\t\t$$.traducao = $1.traducao;// + \"\\t\" + getVarType($0.tipo)+ \" \"+ varName + \"; \\n\";","\t\t\t\tcreateLog(\"Name\", getVarType($0.tipo) + \" \"+ $$.label + \" - \" + varName, appendLogFile);","\t\t\t\tvariavel v = createVar($$.label, getVarType($0.tipo), varName);","\t\t\t\tv.tamanho = 20;","\t\t\t\t// std::cout << \"Tipo \" << getVarType($0.tipo) << \" com i = \"<< i<< std::endl;","\t\t\t\taddVar2Escopo(pilha, v);;","\t\t\t\tdeclaracoes.push_back(v);","\t\t\t}","\t\t\t;","","ATRIB \t\t: TK_ID '=' E","\t\t\t{","\t\t\t\tvariavel var = getVarOnStack($1.label); //Buscar só no escopo atual","\t\t\t\tstring varName = var.nome_temp;","\t\t\t\t","\t\t\t\tcout << $3.label <<\" tam da E em atrib \"<< $3.tamanho << endl;","","\t\t\t\tstring infere_tipo = \"\", store = \"\";","\t\t\t\t","\t\t\t\t//usado para quando precisa dar free e outro malloc para alteracao de string","\t\t\t\tstring trad = \"\";","\t\t\t\t//variavel v;","","\t\t\t\t//std::cout << \"TK_ID = E\" << endl;","","\t\t\t\t//variavel n existe na tabela","\t\t\t\tif(varName == \"\"){","\t\t\t\t\tvarName = getVarName();","\t\t\t\t\t// cout << \"ENTREI NO IF \" <<getVarType($0.tipo) << endl;","","\t\t\t\t\tif(getVarType($0.tipo) != \"\"){","\t\t\t\t\t//\tcout << \"$0 tipo nao vazio\" << endl;","\t\t\t\t\t\tinfere_tipo = getVarType($0.tipo);","\t\t\t\t\t\t","\t\t\t\t\t}","\t\t\t\t\telse{","\t\t\t\t\t//\tcout << \"$0 tipo vazio\" << endl;","\t\t\t\t\t\tinfere_tipo = getVarType($3.tipo);","\t\t\t\t\t\t","\t\t\t\t\t}","","\t\t\t\t\tvar = createVar($$.label, infere_tipo, varName);","\t\t\t\t\t","\t\t\t\t\t","\t\t\t\t\t//se for string verificar o tamanho dela para realizar a copia ","\t\t\t\t\t// que acontece no if de baixo","\t\t\t\t\tif($3.tipo == TK_TIPO_STRING){","\t\t\t\t\t\tvariavel str = getVarOnStack($3.label);","\t\t\t\t\t\tvar.tamanho = str.tamanho;","\t\t\t\t\t\t","\t\t\t\t\t\t","\t\t\t\t\t\t//verifica se $3 foi resultado de concatenaçao da variavel","\t\t\t\t\t\tif($3.tamanho > var.tamanho)","\t\t\t\t\t\t\tvar.tamanho = $3.tamanho;","\t\t\t\t\t}","\t\t\t\t","\t\t\t\t\t// std::cout << \"Tipo \" << getVarType($0.tipo) << \" com i = \"<< i<< std::endl;","\t\t\t\t\t// std::cout << \"(VAR3) Tipo \" << getVarType($3.tipo) << \" com i = \"<< i<< std::endl;","","\t\t\t\t\taddVar2Escopo(pilha, var);","\t\t\t\t\tdeclaracoes.push_back(var);","","\t\t\t\t\t","\t\t\t\t}else{","\t\t\t\t\t//se a variavel ja foi declarada","\t\t\t\t\tcout << \" VARIAVEL FOI DECLARADA \"<< var.tipo << endl;","\t\t\t\t\tif(var.tipo == getVarType(TK_TIPO_STRING)){","\t\t\t\t\t\tstring willy = getVarName();\t\t\t\t\t","\t\t\t\t\t\tvariavel willy_var = createVar(willy, var.tipo, willy);","\t\t\t\t\t\t","\t\t\t\t\t\t//variavel temporaria armazena variavel antiga","\t\t\t\t\t\ttrad = $1.traducao + $3.traducao + \"\\t\"+ willy_var.nome_temp + \" = \" + varName + \";\\n\";","","\t\t\t\t\t\tint tam = var.tamanho + $3.tamanho;","\t\t\t\t\t\ttrad += \"\\t\"+varName + \" = (char*) malloc(sizeof(char) * \"+ to_string(tam) + \");\\n\";","\t\t\t\t\t\t//$$.traducao = $1.traducao + $3.traducao + \"\\tstrcpy(\" + varName  + \", \" + $3.label +\");\\n\";","\t\t\t\t\t\ttrad +=  \"\\tstrcpy(\" + varName  + \", \" + $3.label +\");\\n\";","\t\t\t\t\t\ttrad += \"\\tfree(\"+ willy + \");\\n\";","\t\t\t\t\t\t","\t\t\t\t\t\tcout << \" TRAD EM ATRIB \" <<trad << endl;","\t\t\t\t\t\t","\t\t\t\t\t\t//atualiza o tamanho da variavel existente e salva na pilha","\t\t\t\t\t\tvar.tamanho = tam;","\t\t\t\t\t\taddVar2Escopo(pilha ,var );","\t\t\t\t\t\tdeclaracoes.push_back(willy_var);","\t\t\t\t\t}","\t\t\t\t}","\t\t\t\t","\t\t\t\t// Cast na atribuição com Temp \"Store\"","\t\t\t\tif( (getVarOnStack($1.label).tipo != getVarType($3.tipo) ) ){","\t\t\t\t\t// std::cout << \"Convert Tipo da \" << $1.label << \"    Tipo: \" << varTable[$1.label].tipo  << std::endl;","\t\t\t\t\tstore = getVarName();","\t\t\t\t\tstring linha =  store + \" = (\" +getVarOnStack($1.label).tipo+\") \" + $3.label + \";\\n\";","\t\t\t\t\tstring linha2 = \"\\t\"  + varName + \" = \" + store + \";\\n\";","\t\t\t\t\t$$.traducao = trad + $1.traducao + $3.traducao + \"\\t\"  + linha + linha2;","","\t\t\t\t\tvariavel v = createVar(store, getVarOnStack($1.label).tipo,store);","","\t\t\t\t\taddVar2Escopo(pilha, v);","\t\t\t\t\tdeclaracoes.push_back(v);","\t\t\t\t}","\t\t\t\t// Tipo Inferido ou cast não necessário","\t\t\t\telse{","\t\t\t\t\t","\t\t\t\t\tif (getVarType($3.tipo) == \"char*\"){","\t\t\t\t\t\t$$.tamanho = $3.tamanho - 2;","\t\t\t\t\t\t","\t\t\t\t\t\tif(trad == \"\")","\t\t\t\t\t\t\t$$.traducao = $1.traducao + $3.traducao + \"\\tstrcpy(\" + varName  + \", \" + $3.label +\");\\n\";","\t\t\t\t\t\telse","\t\t\t\t\t\t\t$$.traducao = trad;","\t\t\t\t\t\t","\t\t\t\t\t}","\t\t\t\t\telse","\t\t\t\t\t\t$$.traducao = trad +  $1.traducao + $3.traducao + \"\\t\" + varName  + \" = \" + $3.label +\";\\n\";","\t","\t\t\t\t\t","\t\t\t\t}","\t\t\t\t","\t\t\t\ti++;","\t\t\t\tcreateLog(\"Name\", getVarType($3.tipo) + \" \"+ $$.label + \" - \" + varName, appendLogFile);","\t\t\t","\t\t\t}","\t\t\t;","","E \t\t\t: '('E')'{","","\t\t\t\t$$ = $2;","\t\t\t}","\t\t\t| '-' E{","\t\t\t\t$$.tipo = $2.tipo;","\t\t\t\tstring varName = getVarName();","\t\t\t\t$$.label = '-' + $2.label;","\t\t\t\t$$.traducao = $2.traducao + \"\\t\" + varName +\" = \" + \"-\" + $2.label +\";\\n\";","\t\t\t\tvariavel v = createVar(varName, getVarType($$.tipo), varName);","\t\t\t\taddVar2Escopo(pilha, v);","\t\t\t\tdeclaracoes.push_back(v);","","\t\t\t}"," \t\t\t| E '+' E","\t\t\t{","\t\t\t\tif ($1.tipo == TK_TIPO_STRING || $3.tipo == TK_TIPO_STRING){","\t\t\t\t\tcout << \"No E+E, concat \" << $1.traducao << endl;","\t\t\t\t\tcout << $1.tamanho << $3.tamanho << endl;","\t\t\t\t\t$$ = concatString($1, $3);","\t\t\t\t}","\t\t\t\telse{","\t\t\t\t\t$$ = castArith($1, $3, \"+\");","\t\t\t\t}","\t\t\t}","\t\t\t| E '-' E","\t\t\t{","\t\t\t\t$$ = castArith($1, $3, \"-\");","\t\t\t}","\t\t\t| E '*' E","\t\t\t{","\t\t\t\t$$ = castArith($1, $3, \"*\");","\t\t\t}","\t\t\t| E '/' E","\t\t\t{","\t\t\t\t$$ = castArith($1, $3, \"/\");","\t\t\t}","\t\t\t// | E '^' E","\t\t\t// {","\t\t\t// \t$$.tipo = checkType($1.tipo, $3.tipo);","\t\t\t// \tstring varName = getVarName();","\t\t\t// \t$$.traducao = $1.traducao + $3.traducao + \"\\t\" +getVarType($$.tipo)+ \" \" + varName +\" = \" + \"pow (\"+ $1.label +\" , \"+ $3.label + \")\"+\";\\n\";","\t\t\t// \t$$.label = varName;","\t\t\t//","\t\t\t// }","\t\t\t| E '>' E","\t\t\t{","\t\t\t\t$$.tipo = TK_TIPO_BOOL;","\t\t\t\tatributos atr = castFunction($1.tipo, $1.label, $3.tipo, $3.label, $$.tipo, \">\");","\t\t\t\t$$.traducao = $1.traducao + $3.traducao + atr.traducao;","\t\t\t\t$$.label = atr.label;","","\t\t\t}","\t\t\t| E '<' E","\t\t\t{","\t\t\t\t$$.tipo = TK_TIPO_BOOL;","\t\t\t\tatributos atr = castFunction($1.tipo, $1.label, $3.tipo, $3.label, $$.tipo, \"<\");","\t\t\t\t$$.traducao = $1.traducao + $3.traducao + atr.traducao;","\t\t\t\t$$.label = atr.label;","\t\t\t}","\t\t\t| E TK_GTE E","\t\t\t{","\t\t\t\t$$.tipo = TK_TIPO_BOOL;","\t\t\t\tatributos atr = castFunction($1.tipo, $1.label, $3.tipo, $3.label, $$.tipo, \">=\");","\t\t\t\t$$.traducao = $1.traducao + $3.traducao + atr.traducao;","\t\t\t\t$$.label = atr.label;","\t\t\t}","\t\t\t| E TK_LTE E","\t\t\t{","\t\t\t\t$$.tipo = TK_TIPO_BOOL;","\t\t\t\tatributos atr = castFunction($1.tipo, $1.label, $3.tipo, $3.label, $$.tipo, \"<=\");","\t\t\t\t$$.traducao = $1.traducao + $3.traducao + atr.traducao;","\t\t\t\t$$.label = atr.label;","\t\t\t}","\t\t\t| E TK_EQUAL E","\t\t\t{","\t\t\t\t$$.tipo = TK_TIPO_BOOL;","\t\t\t\tatributos atr = castFunction($1.tipo, $1.label, $3.tipo, $3.label, $$.tipo, \"==\");","\t\t\t\t$$.traducao = $1.traducao + $3.traducao + atr.traducao;","\t\t\t\t$$.label = atr.label;","\t\t\t}","\t\t\t| E TK_NEQUAL E","\t\t\t{","\t\t\t\t$$.tipo = TK_TIPO_BOOL;","\t\t\t\tatributos atr = castFunction($1.tipo, $1.label, $3.tipo, $3.label, $$.tipo, \"!=\");","\t\t\t\t$$.traducao = $1.traducao + $3.traducao + atr.traducao;","\t\t\t\t$$.label = atr.label;","\t\t\t}","\t\t\t| E TK_AND E","\t\t\t{","\t\t\t\t$$.tipo = TK_TIPO_BOOL;","\t\t\t\t$$.tipo = checkType($1.tipo, $3.tipo);","\t\t\t\tstring varName = getVarName();","\t\t\t\t$$.traducao = $1.traducao + $3.traducao + \"\\t\"+getVarType($$.tipo)+ \" \" +  varName +\" = \"+ $1.label +\" && \"+ $3.label +\";\\n\";","\t\t\t\t$$.label = varName;","\t\t\t}","\t\t\t| E TK_OR E","\t\t\t{","\t\t\t\t$$.tipo = TK_TIPO_BOOL;","\t\t\t\t$$.tipo = checkType($1.tipo, $3.tipo);","\t\t\t\tstring varName = getVarName();","\t\t\t\t$$.traducao = $1.traducao + $3.traducao + \"\\t\"+getVarType($$.tipo)+ \" \" +  varName +\" = \"+ $1.label +\" || \"+ $3.label +\";\\n\";","\t\t\t\t$$.label = varName;","\t\t\t}","\t\t\t| TK_NOT E","\t\t\t{","\t\t\t\t$$.tipo = checkType($2.tipo, $2.tipo);","\t\t\t\tstring varName = getVarName();","\t\t\t\t$$.traducao = $2.traducao + \"\\t\"+getVarType($$.tipo)+ \" \" +  varName +\" = \" \"! \"+ $2.label +\";\\n\";","\t\t\t\t$$.label = varName;","\t\t\t}","\t\t\t| TK_REAL","\t\t\t{","\t\t\t\t$$.tipo = TK_TIPO_FLOAT;","\t\t\t\tstring varName = getVarName();","\t\t\t\t$$.traducao = \"\\t\" +varName + \" = \" + $1.label + \";\\n\";","\t\t\t\t$$.label = varName;","","\t\t\t\tvariavel v = createVar(varName, getVarType($$.tipo), varName);","\t\t\t\taddVar2Escopo(pilha, v);","\t\t\t\tdeclaracoes.push_back(v);","\t\t\t}","\t\t\t| TK_NUM","\t\t\t{","\t\t\t\t$$.tipo = TK_TIPO_INT;","\t\t\t\tstring varName = getVarName();","\t\t\t\t$$.traducao = \"\\t\" +varName + \" = \" + $1.label + \";\\n\";","\t\t\t\t$$.label = varName;","\t\t\t\tvariavel v = createVar(varName, getVarType($$.tipo), varName);","\t\t\t\taddVar2Escopo(pilha, v);","\t\t\t\tdeclaracoes.push_back(v);","\t\t\t}","\t\t\t| TK_BOOL","\t\t\t{","\t\t\t\t$$.tipo = TK_TIPO_BOOL;","\t\t\t\tstring varName = getVarName();","\t\t\t\t// puts(\"Estou aqui\");","\t\t\t\t$$.traducao = \"\\t\" + varName+ \" = \" + $1.label + \";\\n\";","\t\t\t\t$$.label = varName;","\t\t\t\tvariavel v = createVar(varName, getVarType($$.tipo), varName);","\t\t\t\taddVar2Escopo(pilha, v);","\t\t\t\tdeclaracoes.push_back(v);","\t\t\t}","\t\t\t| TK_CHAR","\t\t\t{","\t\t\t\t// puts(\"Estou aqui\");","\t\t\t\t$$.tipo = TK_TIPO_CHAR;","\t\t\t\tstring varName = getVarName();","\t\t\t\t$$.traducao = \"\\t\" + varName + \" = \" + $1.label + \";\\n\";","\t\t\t\t$$.label = varName;","\t\t\t\tvariavel v = createVar(varName, getVarType($$.tipo), varName);","\t\t\t\taddVar2Escopo(pilha, v);","\t\t\t\tdeclaracoes.push_back(v);","\t\t\t}","\t\t\t| TK_STRING","\t\t\t{","\t\t\t\t// puts(\"ACHEI UMA STRING\");","\t\t\t\t$$.tipo = TK_TIPO_STRING;","\t\t\t\tstring varName = getVarName();","\t\t\t\t// $$.traducao = \"\\t\" + varName + \" = \" + $1.label + \";\\n\";","\t\t\t\t$$.traducao = \"\\tstrcpy(\" + varName + \",\" + $1.label + \");\\n\";","\t\t\t\t$$.label = varName;","\t\t\t\t","\t\t\t\tvariavel v = createVar(varName, getVarType($$.tipo), varName);","\t\t\t\t// nao conta o abre e fecha aspas","\t\t\t\tv.tamanho = $1.label.size() - 2;","\t\t\t\t","\t\t\t\tcout << \"Imprimindo Label: \" << $1.label <<endl;","\t\t\t\tcout<< \" tamanho da string \" << v.tamanho << endl;","\t\t\t\t","\t\t\t\taddVar2Escopo(pilha, v);","\t\t\t\tdeclaracoes.push_back(v);","\t\t\t}","\t\t\t| TK_ID","\t\t\t{","\t\t\t\tvariavel v = getVarOnStack($1.label);","\t\t\t\tstring id = v.nome_temp;","","\t\t\t\tif (id == \"\"){","\t\t\t\t\tcout << \"Erro de Compilação Variavel '\" << $1.label << \"' inexistente\" <<endl;","\t\t\t\t\texit(0);","\t\t\t\t}","\t\t\t\telse{","","\t\t\t\t\t$$.traducao = $1.traducao;","\t\t\t\t\t$$.label = id;","\t\t\t\t\t$$.tipo = getTokenType(v.tipo);","\t\t\t\t\t$$.tamanho = v.tamanho;","\t\t\t\t\t","\t\t\t\t\tcout << \" achei uma variavel \"<< v.nome_var << \" \" << v.nome_temp << \" \" << v.tamanho << endl;","\t\t\t\t//\tcout << \"REGRA TK_ID: \" <<$$.label << $$.tipo <<\": \"+v.tipo << endl;","\t\t\t\t}","\t\t\t}","\t\t\t;","","%%","","#include \"lex.yy.c\"","","int yyparse();","","int main( int argc, char* argv[] ){","","\t// pushEscopo(pilha, escopoGlobal);","","\t//criar datamap em arquivo","\tyyparse();","\t","","\treturn 0;","}","","string declararVariaveis(){","\treturn getDeclaracoes(declaracoes);","}","","void yyerror( string MSG ){","\tcout << MSG << endl;","\texit (0);","}","","int getTokenType(string type){","\tif(type == \"int\")","\t\treturn TK_TIPO_INT;","\tif(type ==  \"float\")","\t\treturn TK_TIPO_FLOAT;","\tif(type == \"char\")","\t\treturn TK_TIPO_CHAR;","\tif(type == \"bool\")","\t\treturn TK_TIPO_INT;","\tif(type == \"char*\")","\t\treturn TK_TIPO_STRING;","","}","","string getVarType(int type){","\tif(type == TK_TIPO_INT)","\t\treturn \"int\";","\tif(type == TK_TIPO_FLOAT )","\t\treturn \"float\";","\tif(type == TK_TIPO_CHAR)","\t\treturn \"char\";","\tif(type == TK_TIPO_BOOL)","\t\treturn \"int\";","\tif(type == TK_TIPO_STRING)","\t\treturn \"char*\";","\t","\treturn \"\";\t","}","","int checkType (int t1, int t3){","","\t//cout << \"Tipo1 \" << getVarType(t1) << \"Tipo3 \" << getVarType(t3) << endl;","\tif ( (t1 != TK_TIPO_INT && t1 != TK_TIPO_FLOAT) || (t3 != TK_TIPO_INT && t3 != TK_TIPO_FLOAT) ) {","","\t\tif (t1 == TK_TIPO_BOOL && t3 == TK_TIPO_BOOL)","\t\t\treturn TK_TIPO_BOOL;","","\t\telse if (t1 == TK_TIPO_CHAR && t3 == TK_TIPO_CHAR)","\t\t\treturn TK_TIPO_CHAR;","","\t\tputs(\"Invalid Type for the Operation\");","\t\t//exit(0);","\t}","\telse if (t1 == TK_TIPO_FLOAT || t3 == TK_TIPO_FLOAT){","","\t\treturn TK_TIPO_FLOAT;","","\t}","\telse{","","\t\treturn TK_TIPO_INT;","\t}","}","","atributos castFunction(int t1, string t1_label, int t3, string t3_label, int t0, string sinal){","\tint teste = checkType(t1, t3);","\tstring linha = \"\", linha2 = \"\";","","\tstring varName = getVarName();","\tatributos retorno;","","\tif (teste == TK_TIPO_FLOAT){","","\t\tstring store = getVarName();","\t\tretorno.label = store;","","\t\tvariavel v = createVar(varName, getVarType(teste), varName);","\t\taddVar2Escopo(pilha, v);","\t\tdeclaracoes.push_back(v);","\t\tv = createVar(store, getVarType(teste), store);","\t\taddVar2Escopo(pilha, v);","\t\tdeclaracoes.push_back(v);","","\t\tif(t1 == TK_TIPO_INT){","\t\t\tlinha = \"\\t\" + varName + \" = (float) \" + t1_label +\";\\n\";","\t\t\tlinha2 = \"\\t\" + store +\" = \"+ varName + \" \" + sinal + \" \" +t3_label +\";\\n\";","\t\t}","\t\telse if (t3 == TK_TIPO_INT){","\t\t\tlinha = \"\\tfloat \" + varName + \" = (float) \" + t3_label +\";\\n\";","\t\t\tlinha2 = \"\\t\" + store +\" = \"+ t1_label + \" \" + sinal + \" \" + varName +\";\\n\";","\t\t}","\t}","\telse if (teste == TK_TIPO_INT){","\t\tretorno.label = varName;","\t\tlinha2 = \"\\t\" + varName +\" = \"+ t1_label + \" \" + sinal + \" \" + t3_label +\";\\n\";","\t\tvariavel v = createVar(varName, getVarType(teste), varName);","\t\taddVar2Escopo(pilha, v);","\t\tdeclaracoes.push_back(v);","\t}","","\tretorno.traducao = linha + linha2;","\tretorno.tipo = t0;","\treturn retorno;","","}","","atributos castFunctionArith(int t1, string t1_label, int t3, string t3_label, int t0, string sinal){","\tint teste = checkType(t1, t3);","\tstring linha = \"\", linha2 = \"\";","","\tstring varName = getVarName();","\tstring store = getVarName();","\tif (teste == TK_TIPO_FLOAT){","","\t\tvariavel v = createVar(varName, getVarType(teste), varName);","\t\taddVar2Escopo(pilha, v);","\t\tdeclaracoes.push_back(v);","\t\tv = createVar(store, getVarType(teste), store);","\t\taddVar2Escopo(pilha, v);","\t\tdeclaracoes.push_back(v);","","\t\tif(t1 == TK_TIPO_INT){","\t\t\tlinha = \"\\t\" + varName + \" = (float) \" + t1_label +\";\\n\";","\t\t\tlinha2 = \"\\t\" + store +\" = \"+ varName + \" \" + sinal + \" \" +t3_label +\";\\n\";","\t\t}","\t\telse if (t3 == TK_TIPO_INT){","\t\t\tlinha = \"\\t\" + varName + \" = (float) \" + t3_label +\";\\n\";","\t\t\tlinha2 = \"\\t\" + store +\" = \"+ t1_label + \" \" + sinal + \" \" + varName +\";\\n\";","\t\t}","\t}","\tatributos retorno;","\tretorno.traducao = linha + linha2;","\tretorno.label = store;","\tretorno.tipo = t0;","\treturn retorno;","","}","","int checkTypeArith(int t1, int t3){","\tif ( (t1 != TK_TIPO_INT && t1 != TK_TIPO_FLOAT) || (t3 != TK_TIPO_INT && t3 != TK_TIPO_FLOAT) ) {","\t\tputs(\"Invalid Types for Arithmetics Operators!\");","","\t\tcout << \"TIPOS DE T1 E T3 \" << t1 << \" \" << t3 << endl;","\t\texit(0);","","\t}","\tif(t1 == TK_TIPO_FLOAT || t3 == TK_TIPO_FLOAT)","\t\treturn TK_TIPO_FLOAT;","","\telse","\t\treturn TK_TIPO_INT;","}","","void createLog (string name, string toWrite, bool append){","","\tFILE *p_arquivo;","\t//char *nome = \"arquivo.txt\";","\tstring parameter = \"w\";","","\tif(append)","\t\tparameter = \"a\";","","\tif((p_arquivo = fopen(name.c_str(), parameter.c_str()) ) == NULL)","\t{","\t\tprintf(\"\\n\\nNao foi possivel abrir o arquivo.\\n\");","\t\treturn;","\t}","","","\tfprintf(p_arquivo,\"%s\\n\", toWrite.c_str());","","\tfclose(p_arquivo);","","}","","void createVarTableLog (VarTable escopo){","","\tstring linhas;","\t// for (int i = 0; i < pilha->escopos.size(); i++){","\t// \tVarTable varTable = pilha->escopos[i];","\tlinhas += \"Escopo \" + to_string(pilha->escopoAtual) + \"\\n\";","","\t// \t// linhas += \"\\n\";","\tfor (std::map<string,variavel>::iterator it=escopo.begin(); it!=escopo.end(); ++it){","\t\tvariavel var = it->second;","\t\tlinhas += var.tipo + \"\\t\" + var.nome_var + \"\\t\" + var.nome_temp + \"\\t\" + to_string(var.tamanho) + \"\\n\";","\t}","\tlinhas += \"\\n\";","\t// }","","\tcreateLog(\"varTable\", linhas, true);","}","","variavel getVarOnStack(string label){","","\t","\t//out <<  \" GET TEMP ON TABLE: buscando: \" << label<< \" ESCOPO ATUAL  \" << pilha->escopoAtual << endl;","","\tfor (int i = pilha->escopoAtual; i >= 0 ; i--)","\t{\t","\t\tVarTable varTable = pilha->escopos[i];","\t//\tcout<< \"buscando no Escopo: \" << i <<endl;","\t\tfor (std::map<string,variavel>::iterator it=varTable.begin(); it!=varTable.end(); ++it){","\t\t\tvariavel var = it->second;","\t\t//\tcout << var.tipo + \"\\t\" + var.nome_var + \"\\t\" + var.nome_temp + \"\\n\" << endl;","\t\t}","\t}","","","\tVarTable varTable = pilha->escopos[pilha->escopoAtual];","\tif ( varTable.count(label) ){","\t\t//variavel ja foi declarada","\t//\tcout<< \"achei \" << label << \" no escopo atual\" << endl;","\t\treturn varTable[label];","\t}else{","\t\tint escopo = pilha->escopoAtual-1;","\t\tfor(int i = escopo; i > -1; i--){","\t\t\tVarTable varTable = pilha->escopos[i];","\t\t\tif ( varTable.count(label) ){","\t\t\t\t//variavel ja foi declarada","\t\t\t//\tcout<< \"achei \" << label << \" no escopo \" << i << endl;","\t\t\t//\tcout << varTable[label].nome_temp << \" \" << varTable[label].tipo << endl;","\t\t\t\treturn varTable[label];","\t\t\t}","\t\t}","\t//\tcout << \"nao achei \" << label << endl;","","\t\treturn createVar(\"\", \"\",\"\");","\t}","","","\t// cout << \"Nein Nein Nein variavel \"<< label << endl;","\t// exit(0);\t","","}","","atributos castArith(atributos s1, atributos s3, string sinal){","","\tatributos ss;","\tss.tipo = checkTypeArith(s1.tipo, s3.tipo);","\t//Sem Cast","\tif (s1.tipo == s3.tipo){","\t\tstring varName = getVarName();","\t\tss.traducao = s1.traducao + s3.traducao + \"\\t\" + varName + \" = \"+ s1.label +\" \" + sinal + \" \"+ s3.label +\";\\n\";","\t\tss.label = varName;","","\t\tvariavel v = createVar(varName, getVarType(ss.tipo), varName);","\t\t//varTable[varName] = v;","\t\taddVar2Escopo(pilha, v);","\t\tdeclaracoes.push_back(v);","\t}","\t//Com cast","\telse{","\t\tatributos atr = castFunctionArith(s1.tipo, s1.label, s3.tipo, s3.label, ss.tipo, sinal);","\t\tss.traducao = s1.traducao + s3.traducao + atr.traducao;","\t\tss.label = atr.label;","\t}","\treturn ss;","","}","","string getLabel(int token){","","\tif (token == TK_IF)","\t\treturn \"fim_if_\" + to_string(++curLabel);","\t\t","//\telse if (token == TK_ELSE)","\t//\treturn \"else\";","","\telse if (token == TK_WHILE)","\t\treturn \"_loop_\" + to_string(++curLabel);","\t\t","}","","atributos concatString (atributos a1 ,atributos a2){","\t","\tstring varName = getVarName();","\tvariavel var = createVar(varName, getVarType(TK_TIPO_STRING), varName);","\t","\tvariavel v1 = getVarOnStack(a1.label);","\tvariavel v2 = getVarOnStack(a2.label);","\t","\tvar.tamanho = a1.tamanho + a2.tamanho;","\t","\tcout << \"VarTamanho \" << v1.tamanho << \" \" << v2.tamanho << endl;","\tcout << \"dados variaveis encontradas\" <<endl;","\tcout << v1.nome_temp << \" \" << v1.nome_var << endl;","\tcout << v2.nome_temp << \" \" << v2.nome_var << endl;","\t","\tdeclaracoes.push_back(var);","\t","\tstring linha = \"\\tstrcat(\"+ varName +\", \" + a1.label+\");\\n\";","\tstring linha2 = \"\\tstrcat(\"+ varName +\", \" + a2.label+\");\\n\";","\t","\t//String concatenada ta no VarName","\tatributos atr;","\t","\tatr.label = varName;","\tatr.traducao = linha + linha2;","\tatr.tipo = TK_TIPO_STRING;","\tatr.tamanho = var.tamanho;","\t","\t","\t//cout << \" CONCAT STRING\" << endl;","\t//cout << a1.label << \" \" << a1.traducao << a1.tipo << endl;","//\tcout << a2.label << \" \" <<  a2.traducao << a2.tipo << endl;","\t","\treturn atr;","\t","}","","int getNumber(string str){","\tint result = 0;","\t","\tfor (int i = 0; i < str.length(); ++i)\t{","\t\tif(str.at(i) >= '0' &&  str.at(i) <= '9'){","\t\t\tresult *= 10;","\t\t\tresult += str.at(i) - '0'; ","\t\t}","\t}","\treturn result;","}","",""],"id":1}]]},"ace":{"folds":[],"scrolltop":22963.35898208618,"scrollleft":0,"selection":{"start":{"row":1687,"column":0},"end":{"row":1687,"column":0},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":{"row":1673,"state":"start","mode":"ace/mode/c_cpp"}},"timestamp":1487974971404,"hash":"f7cd89cf999b384763fab864085d1217ae13b36f"}